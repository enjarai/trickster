[{"name":"Tome of Tomfoolery","description":"  Tome of Tomfoolery      (() \u003d\u003e {\n    const currentScript \u003d document.currentScript;\n    const parent \u003d currentScript.parentElement;\n    const iframeElement \u003d parent.querySelector(\".spell-preview-iframe\");\n    const pageElement \u003d document.getElementById(\"page\");\n\n    iframeElement.addEventListener(\"mouseenter\", () \u003d\u003e {\n      pageElement.dataset.originalOverflow \u003d pageElement.style.overflow;\n      pageElement.style.overflow \u003d \"hidden\";\n    });\n\n    iframeElement.addEventListener(\"mouseleave\", () \u003d\u003e {\n      pageElement.style.overflow \u003d pageElement.dataset.originalOverflow || \"\";\n    });\n})()\n          \n     \n     \n     ","link":"index.html","extraTerms":[]},{"name":"Introduction","description":"  Introduction   Welcome to the   Tome of Tomfoolery  ! Your guide to magic, trickery, and applied mathematics.  This book consists of many chapters spread out over a few categories. Aside from the tutorials section, these chapters are intended to be read in no particular order and only when required.    If you run into particular trouble using the mod, have trouble understanding something, or encounter any bugs or other issues, please let us know via      Discord     .  More importantly though, have fun!        \n     \n     \n       \n     \n     \n     ","link":"intro.html","extraTerms":[]},{"name":"Extensive Revision","description":"","link":"editing.html#extensiverevision","extraTerms":[]},{"name":"Inner Revision","description":"","link":"editing.html#innerrevision","extraTerms":[]},{"name":"Split Revision","description":"","link":"editing.html#splitrevision","extraTerms":[]},{"name":"Growth Revision","description":"","link":"editing.html#growthrevision","extraTerms":[]},{"name":"Grafting Revision","description":"","link":"editing.html#graftingrevision","extraTerms":[]},{"name":"Pruning Revision","description":"","link":"editing.html#pruningrevision","extraTerms":[]},{"name":"Ascension Revision","description":"","link":"editing.html#ascensionrevision","extraTerms":[]},{"name":"Devotion Revision","description":"","link":"editing.html#devotionrevision","extraTerms":[]},{"name":"Shifting Revision","description":"","link":"editing.html#shiftingrevision","extraTerms":[]},{"name":"Reverse Shifting Revision","description":"","link":"editing.html#reverseshiftingrevision","extraTerms":[]},{"name":"Shuffling Revision","description":"","link":"editing.html#shufflingrevision","extraTerms":[]},{"name":"Notulist\u0027s Revision","description":"","link":"editing.html#notulistsrevision","extraTerms":[]},{"name":"Inner Notulist\u0027s Revision","description":"","link":"editing.html#innernotulistsrevision","extraTerms":[]},{"name":"Grand Revision","description":"","link":"editing.html#grandrevision","extraTerms":[]},{"name":"Plagiarist\u0027s Revision","description":"","link":"editing.html#plagiaristsrevision","extraTerms":[]},{"name":"Interpretation Revision","description":"","link":"editing.html#interpretationrevision","extraTerms":[]},{"name":"Address Revision","description":"","link":"editing.html#addressrevision","extraTerms":[]},{"name":"Spell-Scribing","description":"  Spell-Scribing    Extensive Revision                            (Scribing Pattern)      Can be used to add a new subcircle to any circle.      When Extensive Revision is drawn in the blue circle, the green circle will be created.     Inner Revision                            (Scribing Pattern)      Adds a new inner circle to an existing circle. Inner circles act like glyphs, and can be activated as such. See    Spell Fragments   .     When Inner Revision is drawn in the outer blue circle, the green circle will be created.    An inner circle acts like a glyph, either returning its value, or being executed with arguments.  When no subcircles are connected to it, the circle containing the inner circle will return the inner circle as a spell fragment. This can be used for meta-programming, recursion, and permanent storage of dynamic spells, among other things.    When the circle   does   have connected subcircles, it executes the inner circle directly as if it was called by a    Grand Stratagem   , using the results from the subcircles connected to the outer circle as parameters.  This can be very useful when needing to use one value in multiple places, as inner circles and spell fragments are the only way to move fragments back to the leaves of a tree.     Split Revision                            (Scribing Pattern)      Replaces the circle it is drawn in with a new circle, with the old circle as a subcircle.     When Split Revision is drawn in the blue circle, it adds it as a subcircle to the newly created green circle.     Growth Revision                            (Scribing Pattern)      Nests the circle it is drawn in inside another circle as its inner circle.     When Growth is drawn in the blue circle, it adds it as an inner circle to the newly created green circle.     Grafting Revision                          (Scribing Pattern)      Removes the circle it is drawn in. Will replace it with the original circle\u0026#x27;s first subcircle if available.     When Grafting is drawn in the yellow circle, it and the red circle are deleted and replaced by the green circle.     Pruning Revision                                          (Scribing Pattern)      Removes the circle it is drawn in and any attached subcircles.     When Pruning Revision is drawn in the yellow circle, it and the red circles are deleted.     Ascension Revision                            (Scribing Pattern)      Expands the circle it is drawn in to replace its outer circle.     When Ascension Revision is drawn in the blue circle, it deletes and replaces the red circle.     Devotion Revision                              (Scribing Pattern)      Adds a new subcircle to the outer circle.     When Devotion Revision is drawn in the blue circle, the green circle is created.     Shifting Revision                          (Scribing Pattern)      Shifts the subcircles of the circle it is drawn in, clockwise, so that the last subcircle is now the first.     Reverse Shifting Revision                          (Scribing Pattern)      Accomplishes the opposite of the Shifting Revision, moving subcircles counter-clockwise.     Shuffling Revision                          (Scribing Pattern)      Swaps the first subcircle with the second subcircle.     Notulist\u0026#x27;s Revision                                (Scribing Pattern)      Reads a spell from the user\u0026#x27;s offhand and grafts it onto the spell currently being edited, replacing the circle it is drawn in.     Inner Notulist\u0026#x27;s Revision                                  (Scribing Pattern)      Reads a spell from the user\u0026#x27;s offhand and places it as a glyph in the center of the circle it is drawn in.     Grand Revision                                    (Scribing Pattern)      Replaces the glyph of the circle it is drawn in with the result of executing the user\u0026#x27;s offhand spell. Requires possession of a    Mirror   .     Plagiarist\u0026#x27;s Revision                                  (Scribing Pattern)      Copies the circle it is drawn in to the user\u0026#x27;s offhand.     Interpretation Revision                            (Scribing Pattern)      Creates a pattern literal of the pattern contained within the circle it is drawn in.     Address Revision                                        (Scribing Pattern)      When this scribing pattern is drawn, the    address    of the circle this pattern was drawn in is written to the item in your other hand.       \n     \n     \n       \n     \n     \n     ","link":"editing.html","extraTerms":[]},{"name":"Constants","description":"  Constants   Described here are scribing patterns which set the glyph they are drawn in to a literal value.     Foundational Revision                             (Scribing pattern)     Replaces the glyph with the number two.     Catalogue Revision                                   (Scribing pattern)     Replaces the glyph with an empty list.     Atlas Revision                                   (Scribing pattern)     Replaces the glyph with an empty map.       \n     \n     \n       \n     \n     \n     ","link":"constants.html","extraTerms":[]},{"name":"Concepts","description":"  Concepts   This category contains some useful conventions and concepts used in common magics.       \n     \n     \n       \n     \n     \n     ","link":"concepts.html","extraTerms":[]},{"name":"Fragment Decay","description":"  Fragment Decay   Some types of fragments, such as   Entities  , have a rather loose connection to their targets. While these fragments can generally be handled and used just fine, this imparts some restrictions that other types do not suffer from.    If at any point these so-called ephemeral fragments are inscribed, messaged, or otherwise transferred between spells, they tend to decay into a unique fragment type referred to as   ##Zalgo##  .  This process makes them completely useless for their original purpose, but these   ##Zalgo##   fragments do have a few unique properties that make them potentially useful in other ways.    To begin with, any one   ##Zalgo##   fragment will never be equal to any other fragment, not even itself.  Additionally, feeding a   ##Zalgo##   fragment into    Decaying Distortion    seems to produce a completely random and unique result every single time.       \n     \n     \n       \n     \n     \n     ","link":"concepts/fragment_decay.html","extraTerms":[]},{"name":"Long Spells","description":"  Long Spells   Spells do not all execute instantly. Unless cast through a mirror, a big enough spell limits execution to a certain amount of circles per second. It may even run forever, provided its caster remains alive, the spell does not blunder, and it never runs out of circles to execute.    To cast a spell capable of running long, a free spell slot is required, even if the spell completes within one twentieth of a second.   Without an empty spell slot, no spells can be cast except through a mirror. Spell slots may be viewed from the caster\u0026#x27;s inventory.    Spell slots have the following states:    inactive (collapsed)   inactive and blundered (red)   active and okay (green)   active and at maximum executions per second (orange)   active but waiting (white)     Patterns that execute spell fragments create sub-spells within their current spell. A spell may not have a sub-spell more than 255 spells deep, and will blunder if such a thing is attempted.   If a so-called forking pattern is   effectively   the final pattern in the current spell,   this limit is ignored  .       \n     \n     \n       \n     \n     \n     ","link":"concepts/multi_tick.html","extraTerms":[]},{"name":"Macros","description":"  Macros   Macros allow you to create your own revisions to aid with spell scribing.   A    map    that links a set of patterns to a set of spells is used to define macros. These maps, when inscribed into any ring and worn in a ring slot, will be checked for keys matching any drawn patterns.    A simple    Macro Ring    can be used for this purpose if no other rings are available.  If a macro for a drawn pattern is found, the associated spell will be cast and given one argument: A copy of the circle it is drawn in. The spell is then expected to return a new spell fragment to replace the fragment given.  This effectively lets anyone create their own set of revisions.    Note: Macro spells are not capable of    long casting   . This means they do not take a spell slot, but also can\u0026#x27;t run more than about 64 circles.       \n     \n     \n       \n     \n     \n     ","link":"concepts/macro.html","extraTerms":[]},{"name":"Mana","description":"  Mana   Mana is what fuels ploys. It is the cost of manipulating the world.  As is tradition, amounts of Mana are measured in Gandalfs, or G. One Gandalf being defined as the amount of magical energy required to light a candle.    Any amount of Mana that is lesser than one G is generally considered negligible.  Draw rate, or any change in Mana, is measured in Merlins, or M. Merlins are defined as Gandalfs per Tick, Ticks being the smallest unit of meaningful time, at 1/20th of a second.  For example, a spell drawing 50 milliMerlins would consume 1 Gandalf per second.    Mana can be persistently stored and acquired via Knots. See    this entry    for more information on those.       \n     \n     \n       \n     \n     \n     ","link":"concepts/mana.html","extraTerms":[]},{"name":"Stack Traces","description":"  Stack Traces   Spell failures are referred to as   blunders  . When a spell blunders, a stack trace is printed out, signifying   where   in the spell the failure occurred. Stack traces are colon-separated lists of characters of three varieties:    # (pound/hashtag)   \u0026gt; (chevron/angle bracket)   \u0026amp; (ampersand symbol)   any number     The numbers are input indexes, while the chevrons, hashtags, and ampersands all indicate a change of context into a different spell fragment.  Chevrons indicate a fragment provided by the current spell, while hashtags mean the fragment came from elsewhere.  Ampersands on the other hand represent a successful infinite recursion of any kind.    Note: Indexes  Each circle in a spell has a number, an   index  , that states its position relative to its parent. The purple pin on the parent circle is always counter-clockwise of the first subcircle, which has an index of zero. Each subcircle clockwise of the first subcircle has an index one greater than the one before it.       \n     \n     \n       \n     \n     \n     ","link":"concepts/trace.html","extraTerms":[]},{"name":"Trick Signatures","description":"  Trick Signatures   The Tricks section of this book contains descriptions and usage details of all operations that spells can perform. These details include so-called Signatures.   Signatures are short and standardized descriptions of the inputs and outputs a certain trick may take and provide.    An example Signature might look like this:    Vector  ,   Number   -\u0026gt;   Boolean    This describes a trick that expects a   Vector   as the first argument and a   Number   as the second, as counted clockwise from the circle\u0026#x27;s Divider Pin.  This trick would also provide a   Boolean   as output, potentially for its parent circle to use.    Aside from commas (,) to separate arguments, and the arrow (-\u0026gt;) to distinguish input from output, a few other symbols might show up in signatures, as outlined below:    Number?   -\u0026gt;   Any    A question mark (?) after an argument indicates that providing the value is optional. One can either leave the argument out completely, or provide void.      Number   |   Vector   -\u0026gt;   Any   |   Void    Often times, one may see two argument or return types being separated by a pipe symbol. (|)  For arguments, these indicate that either of the two types may be used in that position. In return types, it means the trick may return either of the given types, depending on the situation.    [  Any  ],   Number   -\u0026gt; [  Boolean  ]  Some inputs or outputs may be wrapped in square brackets. ([]) These indicate that the trick expects or returns a list of exclusively this type of fragment.    {  Any  :   Boolean  },   Any   -\u0026gt;   Boolean    In other cases, signatures will have two types wrapped in curly braces ({}) and split by a colon. (:) This represents a map with keys of the first type, and values of the second.      Spell  ,   Any  ... -\u0026gt;   Any    Sometimes, three trailing periods (...) will be used after a type. This indicates that after the previous argument, the trick will accept   any number of additional arguments   of this type.       \n     \n     \n       \n     \n     \n     ","link":"concepts/signatures.html","extraTerms":[]},{"name":"Trick Types","description":"  Trick Types   All tricks fit in the following categories:   Delusion: tricks that gather information purely from context   Ingress: tricks that gather information based on input   Distortion: fixed-input pure tricks   Stratagem: variable-input pure tricks      Ploy: world-manipulating and/or mana-consuming tricks   Deviation: tricks which modify the state of the spell itself   Revision: scribing patterns   These categories are roughly followed, but in many cases, tricks will be sorted based more on intention than rigid definition.       \n     \n     \n       \n     \n     \n     ","link":"concepts/tricks_explanation.html","extraTerms":[]},{"name":"Trigger Items","description":"  Trigger Items   While the    Wand    is the most common, and most versatile, way of quickly casting spells, it is not the only one available. Other items may cast their inscribed spell upon certain criteria being met. These items and their criteria are described here.     Warrior\u0026#x27;s Rage  On tools and melee weapons, the Warrior\u0026#x27;s Rage executes the inscribed spell when bringing harm to an entity. The targeted entity is received as the first argument.    Prospector\u0026#x27;s Glee  Prior to destroying a block, the Prospector\u0026#x27;s Glee begins the spell inscribed on the held tool. The position of the breaking block is received as the first argument.    Performer\u0026#x27;s Grace  Moments before touching down on a block, the Performer\u0026#x27;s Grace triggers a spell inscribed in footwear. The distance that the wearer fell is passed as the first argument. When held back by water, there is no Grace to the Performer.       \n     \n     \n       \n     \n     \n     ","link":"concepts/trigger_items.html","extraTerms":[]},{"name":"Wards","description":"  Wards   Wards are defensive spells that are cast when you are the target of a ploy. Your ward receives the caster, and a list containing the inputs the caster is passing to the triggering glyph. The expected signature for a ward is the following:    entity | vector, any[] -\u0026gt;    The ward used is retrieved from the combined maps of all charms worn by the target, where the key is the triggering glyph. The triggered ward requires an empty spell slot to be run, but begins prior to the execution of the triggering glyph.       \n     \n     \n       \n     \n     \n     ","link":"concepts/ward.html","extraTerms":[]},{"name":"Items","description":"  Items   Entries in this category go over some of the items available to the aspiring magician.       \n     \n     \n       \n     \n     \n     ","link":"items.html","extraTerms":[]},{"name":"Amethyst Whorl","description":"  Amethyst Whorl   The Amethyst Whorl is little more than a cheap trinket, but it serves its purpose: it may contain up to 512 G, and will fill at a constant rate of 0.5 M when worn around the neck.  Just like a    Knot   , the stored mana is available to the wearer\u0026#x27;s spells.    An Amethyst Whorl may be carved from a single shard, and worn around the neck by use of a simple copper and string attachment.           \n     \n     \n       \n     \n     \n     ","link":"items/amethyst_whorl.html","extraTerms":[]},{"name":"Knots","description":"  Knots   Knots are gemstones encased in glass orbs that hold a certain amount of    Mana    based on the rarity of the gem they\u0026#x27;re made from.  Some gems have unique properties when made into a Knot, such as Amethyst, which, unlike other gems, already contains Mana when converted, but cannot be recharged naturally.    Naturally recharging a Knot is done by exposing it to the night sky. It will charge most quickly at or near a full or new moon, but not at all when exactly in between.  To count as being exposed, a Knot must either be thrown on the ground or placed in a    Charging Array    or    Spell Construct    with a clear view of the sky. Rechargeable Knots thrown on the ground will not despawn.    Most gems or crystals can be made into Knots using    Ploy of the Moon Watcher   .  This ploy optionally takes two arguments, one    slot    containing a gem, another holding a Glass Block. If the latter isn\u0026#x27;t provided, the first available Glass Block will be used. If the former isn\u0026#x27;t provided, an Amethyst Shard will be used in the same manner. As such, it is not possible to create non-amethyst Knots without providing a slot reference.     A few known Knot types are:     Amethyst     Creation cost: none Capacity: 128 G      Emerald     Creation cost: 512 G Capacity: 1024 G      Diamond     Creation cost: 8192 G Capacity: 16384 G    Other gems and crystals may be able to be turned into Knots as well, but this must be determined on a case-by-case basis.       \n     \n     \n       \n     \n     \n     ","link":"items/knots.html","extraTerms":[]},{"name":"Quartz Knot","description":"  Quartz Knot   Aha, a    Knot    based on Nether Quartz crystals! It seems more than just gems can be turned into mana containers.  This one however, has a rather abysmal capacity, on par with its Amethyst sibling. Its natural recharge rate is also pitifully at the levels of an Emerald Knot of its same capacity. Not terrible, but definitely not great.    Regardless, it has some redeeming qualities.  For one, inserting this Knot into a construct accelerates its casting ever so slightly. It really isn\u0026#x27;t much, but even a few extra circles can vastly improve a spell\u0026#x27;s effectiveness.    Its second uniqueness is far more interesting though.  By augmenting the    Ploy of Receipt    with a slot as a second argument, it is possible to listen for messages from an item.  Most items do not react to this at all, but trying the same on this Knot, it responds!    When a Quartz Knot is queried in this way, it replies with an ever-incrementing number, starting at zero at its initial creation, and counting up by about twenty every second.  A message can also be sent into the Knot using a similar method to resynchronize it, and offset its counter by a given number.    If one listens closely, the faint ticking of a clock can be heard coming from within the Quartz Knot...  Yet, the Knot contains no moving parts...  What a strange object...       \n     \n     \n       \n     \n     \n     ","link":"items/quartz_knot.html","extraTerms":[]},{"name":"Echo Knot","description":"  Echo Knot   From a single shard, two    Knots    are made. With a capacity equivalent to twice that of a Diamond Knot and a natural recharge rate of three, Echo Knots are already quite incredible. But that\u0026#x27;s not what makes them truly unique. Each pair, born of the same Echo Shard, share the same store of mana. Fill one, and its twin is filled as well, no matter where in the world it may be.    Furthermore, with the use of the    Dispatch Ploy   , messages can be sent directly into Echo Knots. Fragments sent in this way can be received from anywhere, just by listening to the Knot\u0026#x27;s twin using the    Ploy of Receipt   , making for an excellent method of long-distance, private communication.       \n     \n     \n       \n     \n     \n     ","link":"items/echo_knot.html","extraTerms":[]},{"name":"Of Stars Below...","description":"  Of Stars Below...   Upon the vanquishing of a terrible foe, a sliver of its power remains. This star from down below, where flame burns eternal and magma forever flows, has never seen the sky\u0026#x27;s light. Now freed of its host, it is the light of the abyss. It is unyielding in its might.    One would require quettaGandalfs to construct such a potent font of power. It is unimagineable that the Wither could even be vanquished, with such strength at its disposal. The Nether\u0026#x27;s Stars must have limitations that are not immediately evident...       \n     \n     \n       \n     \n     \n     ","link":"items/astral_hint.html","extraTerms":[]},{"name":"Astral Knot","description":"  Astral Knot   Of a Nether Star, the Astral    Knot    is made. With a capacity multiple orders of magnitude greater than a Diamond Knot, the Astral Knot has a strange quirk: similarly to the Amethyst Knot, the moonlight does not replenish its stores. Instead, it replenishes itself.    The Astral Knot generates mana passively with regard to its current stores. The fuller it is, the faster it fills. However, it does not generate mana when completely empty.       \n     \n     \n       \n     \n     \n     ","link":"items/astral_knot.html","extraTerms":[]},{"name":"Cracked Amethyst Knot","description":"  Cracked Amethyst Knot   It seems that Amethyst had a little more potential than imagined! By cracking an Amethyst Knot, this potential is unlocked, instantly recharging the Knot back to twice its original capacity. This means its mana output can be effectively tripled before it becomes obsolete.    It\u0026#x27;s unclear why this happens. Amethyst may hold more mysteries than initially expected.       \n     \n     \n       \n     \n     \n     ","link":"items/cracked_amethyst_knot.html","extraTerms":[]},{"name":"Cracked Quartz Knot","description":"  Cracked Quartz Knot   When cracked, a Quartz Knot retains a lot of its unique qualities, though they become greatly exaggerated, and are arguably even more interesting.  Quartz Knots already aren\u0026#x27;t known for their mana-related capabilities, but their cracked variant holds   no mana at all  .    On the other hand, its ability to accelerate constructs is enhanced. When inserted into a construct, its casting speed is increased by 50%.  However, doing so will vastly limit the construct\u0026#x27;s capabilities, as it will have no access to mana.    Additionally, the timekeeping abilities of the Knot also change. It still keeps a counter that ticks up about 20 times per second, but it no longer starts at zero from its creation.  Instead, the number it seems to be keeping track of is significantly larger, and now unable to be offset. It might even be in the same ballpark as the age of the world itself...       \n     \n     \n       \n     \n     \n     ","link":"items/cracked_quartz_knot.html","extraTerms":[]},{"name":"Cracked Echo Knot","description":"  Cracked Echo Knot   Found in the remnants of an ancient civilization, these    Knots    are broken, and yet still usable. They recharge naturally at only twice the rate of an Emerald Knot, but have a capacity twice that of a Diamond Knot.  There is something else that is strange about this Knot.    When a slot which contains a Cracked Echo Knot is given as the second argument to a    Ploy of Receipt   , it behaves rather queerly. Doing the same with a    Dispatch Ploy    appears to alter   something  .  It is uncertain how exactly these two ploys interact with the Cracked Echo Knot. However, any attempt to make use of these oddities beyond the context of a player caster yields no results.       \n     \n     \n       \n     \n     \n     ","link":"items/cracked_echo_knot.html","extraTerms":[]},{"name":"Cracked Astral Knot","description":"  Cracked Astral Knot   Somehow, cracking an Astral Knot has increased its capacity by a truly staggering amount. Its original capacity of 1048 kG has been multiplied by a factor of sixteen, to roughly 16.8 MG.    However, the Knot\u0026#x27;s inherent mana regeneration ability has been completely crippled. It now   drains   mana at a rate proportional to its current supply, making it ill-suited for long-term storage.       \n     \n     \n       \n     \n     \n     ","link":"items/cracked_astral_knot.html","extraTerms":[]},{"name":"Wand","description":"  Wand   A wand is a very simple magical tool that will cast a spell inscribed into it when right-clicked.      Spells can be inscribed into a wand using    Notulist\u0026#x27;s Ploy   .       \n     \n     \n       \n     \n     \n     ","link":"items/wand.html","extraTerms":[]},{"name":"Mirror of Evaluation","description":"  Mirror of Evaluation   A Mirror of Evaluation is a tool very similar to the ever-useful    Scroll and Quill   . The main difference is that it greedily casts any part of the spell it can while it is being written.  Say for example you write a subcircle with two more subcircles, each containing a    Foundational Delusion   .    When drawn, the glyphs of these subcircles will become literals for the number 2.  Then, you can draw say, an    Annexation Stratagem    in the parent circle of the two twos. This will immediately consume the two subcircles and evaluate to a literal 4 as a glyph in the parent circle.    The best way to understand these workings is absolutely to try them out for yourself:      It\u0026#x27;s worth noting that, while it casts any part of the spell it can, the mirror still stores the spell its holding inside itself as an inscribed spell.     Thus making it accessible to all conventional spell reading and writing methods.       \n     \n     \n       \n     \n     \n     ","link":"items/mirror_of_evaluation.html","extraTerms":[]},{"name":"Scroll and Quill","description":"  Scroll and Quill   The Scroll and Quill can be used to easily write and store complex and reusable spells.  Right-clicking it opens the    Spell-Scribing    interface, letting you directly modify the contained spell.  Scrolls can be stored in a    Hat    for easy access and safe-keeping.    The written spell can be read from the scroll by means of    Notulist\u0026#x27;s Delusion   . It is also possible to write to a scroll programmatically using    Notulist\u0026#x27;s Ploy           Scrolls can be dyed by combining them with any dye in a crafting table:   A Scroll and Quill can also be signed by shift-right-clicking it. This lets you give it a custom name for free, but it cannot be written to anymore by any means.    However, signed scrolls can be charged with one to eight vials of spell ink, a special concoction that imbues scrolls with a single-use pool of mana.  Scrolls that have been imbued with mana can have their contained spell cast at no risk to the user, however, doing so consumes the scroll.     Single-use scrolls have an internal buffer of mana with a capacity equivalent to the amount of spell ink used in their making, times 100.      Do Not Consume!       \n     \n     \n       \n     \n     \n     ","link":"items/scroll_and_quill.html","extraTerms":[]},{"name":"Hats","description":"  Hats   The caster\u0026#x27;s hat is quite an ingenious accessory. After equipping it on their head, a caster can press the     G    button to take the hat into their offhand quickly.  When a hat is held in your offhand, you can right-click to open it, and insert up to 27 scrolls. These scrolls can then be selected by shift-scrolling while holding the hat.    Now, when a running spell tries to access the spell in your other hand via    Notulist\u0026#x27;s Delusion   , it will read the spell from the selected scroll in the held hat instead.  You can also access the spell in any slot of your hat directly using    Cranium Stratagem   , or read the selected slot using    Cranium Delusion   .    A few different types of hat are available depending on your likes and preferences! They all function the exact same though.  The classic Top Hat:         A mysterious Witch Hat:       And even the humble (but very cool) Fez:            \n     \n     \n       \n     \n     \n     ","link":"items/top_hat.html","extraTerms":[]},{"name":"Macro Ring","description":"  Macro Ring   A plain gold ring used for containing    Macros   .           \n     \n     \n       \n     \n     \n     ","link":"items/ring.html","extraTerms":[]},{"name":"Warding Charm","description":"  Warding Charm   A basic magical trinket capable of holding spells to be used for    Warding   .           \n     \n     \n       \n     \n     \n     ","link":"items/warding_charm.html","extraTerms":[]},{"name":"Scroll Shelves","description":"  Scroll Shelves   Scroll Shelves are a nice way to store and visually display your collection of spells in the world. These blocks function similarly to Chiseled Bookshelves, you can right-click a scroll into any of the empty slots on its front side, and take it out with another click.    Scrolls on a shelf will display in the color they\u0026#x27;re dyed as, if applicable, and when targeted with your crosshair, will show their name for easy browsing.  Shelves can interact with hoppers.           \n     \n     \n       \n     \n     \n     ","link":"items/scroll_shelf.html","extraTerms":[]},{"name":"Charging Array","description":"  Charging Array   A Charging Array is a simple stone plate with nine slots for holding    Knots   . They can be placed in any orientation. Knots stored in the Array can be charged by the moon as if they were thrown on the ground.    While they may look similar to a    Spell Construct   , Charging Arrays are not capable of casting spells. However, external spells may interact with the stored Knots just like they would any other inventory.           \n     \n     \n       \n     \n     \n     ","link":"items/charging_array.html","extraTerms":[]},{"name":"Spell Construct","description":"  Spell Construct   A Spell Construct is a relatively simple device that, when inscribed with a spell and placed into the world, will persistently cast said spell.  Constructs are most useful for    long-running    spells that respond to happenings in the world, or trigger periodically.    If a source of mana is required, any    Knot    may be inserted into the center of the Construct with a right-click. They may also be shift-right-clicked to reset the currently running spell, ignoring any previous blunders.           \n     \n     \n       \n     \n     \n     ","link":"items/spell_construct.html","extraTerms":[]},{"name":"Modular Spell Construct","description":"  Modular Spell Construct   A Modular Spell Construct, unlike the simple    Spell Construct   , does not execute the spell inscribed onto it. Instead, up to four    Spell Cores    may be inserted into the Construct\u0026#x27;s corner slots, where they will be executed concurrently. The Spell Cores draw mana from the    Knot    placed in the Construct\u0026#x27;s center, and share the same    Crow Mind   .    The multiple cores in this Construct type can access and delegate tasks to one another using the same tricks as the ones used for player spell slot manipulation. This lets advanced spell casters design persistent multithreaded spells.           \n     \n     \n       \n     \n     \n     ","link":"items/modular_spell_construct.html","extraTerms":[]},{"name":"Spell Core","description":"  Spell Core   Spell Cores may be inserted into a    Modular Spell Construct   , where they will run the spell inscribed onto them at 75% the speed of a player\u0026#x27;s.    To construct a Spell Core, one must have a shard of amethyst as a   channel  , a pearl of the End as a   heart  , a thread of gold as a   mind  , and a wrapping of leather as a   guard  .           \n     \n     \n       \n     \n     \n     ","link":"items/spell_core.html","extraTerms":[]},{"name":"Rusted Spell Core","description":"  Rusted Spell Core   Old and worn, these    Spell Cores    are found in abandoned chests throughout the Overworld. Unlike others, they are forged of metal and have begun to rust. It is highly inadvisable to utilize them without great caution.       \n     \n     \n       \n     \n     \n     ","link":"items/rusted_spell_core.html","extraTerms":[]},{"name":"Ominous Spell Core","description":"  Ominous Spell Core   A variant of the    Spell Core    found in the vaults of Trial Chambers. They execute their inscribed spell at a rate equal to that of player spells. It\u0026#x27;s not clear how they\u0026#x27;re made, though only the shimmer of diamond differentiates them from the typical Spell Core.       \n     \n     \n       \n     \n     \n     ","link":"items/ominous_spell_core.html","extraTerms":[]},{"name":"Torment Spell Core Shell","description":"  Torment Spell Core Shell   Nether Wart shows potential for the lining of a    Spell Core   . Its transformative properties enable the conversion of energy necessary to power a spell from a spawner\u0026#x27;s essence.  A Shell may be constructed from the Wart, a Nether Quartz, and Iron to bind it tightly.        However, it is not a functioning Core in itself. By interacting with a spawner while holding this Shell, the spawner\u0026#x27;s essence may be absorbed. Only then will it function when placed within a    Modular Spell Construct   .       \n     \n     \n       \n     \n     \n     ","link":"items/inactive_spawner_spell_core.html","extraTerms":[]},{"name":"Torment Spell Core","description":"  Torment Spell Core   A variant of the    Spell Core    powered by a spawner. They execute their inscribed spell at one and a half times the rate of player spells. However, if no player is within 16 blocks, they will pause completely.       \n     \n     \n       \n     \n     \n     ","link":"items/spawner_spell_core.html","extraTerms":[]},{"name":"Spell Resonator","description":"  Spell Resonator   A simple device that can be set to emit any redstone power level into the block it\u0026#x27;s attached to.  Can be configured and queried by    Resonance Ploy    and    Ingress of Resonance    respectively.             \n     \n     \n       \n     \n     \n     ","link":"items/spell_resonator.html","extraTerms":[]},{"name":"The Acolyte\u0027s Pledge","description":"  The Acolyte\u0026#x27;s Pledge     The Bindings were offered, simply made of dyed leather, but the magic was known [...]   -- Sanin        The Acolyte\u0026#x27;s Bindings and the Archmage\u0026#x27;s Tether serve a unique purpose: to allow someone to start a spell as another caster.      When the unlinked Bindings are worn and their wearer is crouching, the Tether may be used on them to link the two.     Once bound, using the Tether with a spell inscribed will execute that spell as the wearer of the Bindings. The spell will take one of their spell slots, consume their mana, and be at their position. However, it will receive as its first argument the entity which made use of the Tether.    [...] and he accepted it graciously, his freedom a small price for the teachings of his Archmage.   -- Sanin       \n     \n     \n       \n     \n     \n     ","link":"items/leash_and_collar.html","extraTerms":[]},{"name":"Delusions \u0026 Ingresses","description":"  Delusions \u0026amp; Ingresses   Delusion tricks generate a value based on context, with no input given. These usually make up the leaf nodes of a spell tree.  Ingress tricks gather information based on the input given. Unlike distortions however, they aren\u0026#x27;t guaranteed to always return the same result.       \n     \n     \n       \n     \n     \n     ","link":"delusions_ingresses.html","extraTerms":[]},{"name":"Hoarder\u0027s Delusion","description":"-\u003e [Any]","link":"delusions_ingresses/arguments.html#trickster:get_all_arguments","extraTerms":[]},{"name":"Primary Delusion","description":"-\u003e Any","link":"delusions_ingresses/arguments.html#trickster:load_argument_1","extraTerms":[]},{"name":"Secondary Delusion","description":"-\u003e Any","link":"delusions_ingresses/arguments.html#trickster:load_argument_2","extraTerms":[]},{"name":"Tertiary Delusion","description":"-\u003e Any","link":"delusions_ingresses/arguments.html#trickster:load_argument_3","extraTerms":[]},{"name":"Quaternary Delusion","description":"-\u003e Any","link":"delusions_ingresses/arguments.html#trickster:load_argument_4","extraTerms":[]},{"name":"Quinary Delusion","description":"-\u003e Any","link":"delusions_ingresses/arguments.html#trickster:load_argument_5","extraTerms":[]},{"name":"Senary Delusion","description":"-\u003e Any","link":"delusions_ingresses/arguments.html#trickster:load_argument_6","extraTerms":[]},{"name":"Septenary Delusion","description":"-\u003e Any","link":"delusions_ingresses/arguments.html#trickster:load_argument_7","extraTerms":[]},{"name":"Octonary Delusion","description":"-\u003e Any","link":"delusions_ingresses/arguments.html#trickster:load_argument_8","extraTerms":[]},{"name":"Arguments","description":"  Arguments   Fragments can be passed into most    Deviations    as arguments.  These fragments can then be retrieved within the cast spell, either directly or as a list of all arguments.     Hoarder\u0026#x27;s Delusion                                        -\u0026gt;  [ Any  ]        Returns all arguments as a list.     Primary Delusion                          -\u0026gt;  Any       Returns the first argument passed. Blunders if it is unavailable.     Secondary Delusion                          -\u0026gt;  Any       Returns the second argument passed. Blunders if it is unavailable.     Tertiary Delusion                          -\u0026gt;  Any       Returns the third argument passed. Blunders if it is unavailable.     Quaternary Delusion                          -\u0026gt;  Any       Returns the fourth argument passed. Blunders if it is unavailable.     Quinary Delusion                          -\u0026gt;  Any       Returns the fifth argument passed. Blunders if it is unavailable.     Senary Delusion                          -\u0026gt;  Any       Returns the sixth argument passed. Blunders if it is unavailable.     Septenary Delusion                          -\u0026gt;  Any       Returns the seventh argument passed. Blunders if it is unavailable.     Octonary Delusion                          -\u0026gt;  Any       Returns the eighth argument passed. Blunders if it is unavailable.       \n     \n     \n       \n     \n     \n     ","link":"delusions_ingresses/arguments.html","extraTerms":[]},{"name":"Ingress of Validation","description":"Vector -\u003e Block","link":"delusions_ingresses/block.html#trickster:check_block","extraTerms":[]},{"name":"Ingress of Hardness","description":"Vector -\u003e Number\nBlock -\u003e Number","link":"delusions_ingresses/block.html#trickster:get_block_hardness","extraTerms":[]},{"name":"Ingress of Suitability","description":"Vector, Block? -\u003e Boolean","link":"delusions_ingresses/block.html#trickster:can_place_block","extraTerms":[]},{"name":"Ingress of Logic","description":"Vector -\u003e Number","link":"delusions_ingresses/block.html#trickster:get_redstone_power","extraTerms":[]},{"name":"Ingress of Resonance","description":"Vector -\u003e Number","link":"delusions_ingresses/block.html#trickster:check_resonator","extraTerms":[]},{"name":"Ingress of Luminance","description":"Vector, Boolean? -\u003e Number","link":"delusions_ingresses/block.html#trickster:light_level","extraTerms":[]},{"name":"Block Querying","description":"  Block Querying   Via these Ingresses, one can query blocks in the world and their properties.  These tricks will blunder if their target is not being observed.     Ingress of Validation                                     Vector   -\u0026gt;   Block       Returns the type of the block at the given position.     Ingress of Hardness                                         Vector   -\u0026gt;   Number      Block   -\u0026gt;   Number       Returns the hardness of the block at the given position or of the given block type.     Ingress of Suitability                                                 Vector  ,   Block ?    -\u0026gt;   Boolean       Returns whether the given block can be placed at the given position. If no block is given, returns whether the position is generally replaceable.     Ingress of Logic                                   Vector   -\u0026gt;   Number       Returns the redstone power level inputted into the given block position.     Ingress of Resonance                                         Vector   -\u0026gt;   Number       Returns the power level of the    Spell Resonator    at the given position. Blunders if no resonator is present.     Ingress of Luminance                                         Vector  ,   Boolean ?    -\u0026gt;   Number       Returns the light level at the given position. A boolean can be specified to check only sky light (if true) or block light (if false).       \n     \n     \n       \n     \n     \n     ","link":"delusions_ingresses/block.html","extraTerms":[]},{"name":"Positioning Delusion","description":"-\u003e Vector","link":"delusions_ingresses/caster_tricks.html#trickster:reflection","extraTerms":[]},{"name":"Directional Delusion","description":"-\u003e Vector","link":"delusions_ingresses/caster_tricks.html#trickster:facing_reflection","extraTerms":[]},{"name":"Reflection Delusion","description":"-\u003e Entity","link":"delusions_ingresses/caster_tricks.html#trickster:caster_reflection","extraTerms":[]},{"name":"Authority Delusion","description":"-\u003e Number","link":"delusions_ingresses/caster_tricks.html#trickster:mana_reflection","extraTerms":[]},{"name":"Crowning Delusion","description":"-\u003e Number","link":"delusions_ingresses/caster_tricks.html#trickster:max_mana_reflection","extraTerms":[]},{"name":"Delusion of Order","description":"-\u003e Number | Void","link":"delusions_ingresses/caster_tricks.html#trickster:current_thread","extraTerms":[]},{"name":"Macro Delusion","description":"-\u003e {Pattern: Spell}","link":"delusions_ingresses/caster_tricks.html#trickster:read_macro_ring","extraTerms":[]},{"name":"Framed Delusion","description":"-\u003e Number","link":"delusions_ingresses/caster_tricks.html#trickster:hotbar_reflection","extraTerms":[]},{"name":"Dimensional Delusion","description":"-\u003e Dimension","link":"delusions_ingresses/caster_tricks.html#trickster:get_dimension","extraTerms":[]},{"name":"Casting Context","description":"  Casting Context     \u0026quot;More often than not, casting a spell will start from the Self.\u0026quot;      \u0026quot;Whether it be a human caster, a construct, or something else entirely,     the Self is how we perceive the world, and as such, it is the lens through which we view our magic.\u0026quot;    -- An excerpt from a lecture by Prof. Citrine.     Positioning Delusion                                -\u0026gt;  Vector       Returns the location the spell is being cast from.     Directional Delusion                                        -\u0026gt;  Vector       Returns the direction the caster is facing as a unit vector.     Reflection Delusion                                -\u0026gt;  Entity       Returns the entity casting the spell, if available.     Authority Delusion                                            -\u0026gt;  Number       Returns the amount of mana directly available to the spell.    This delusion counts the amount of mana in all mana-carrying items the caster is holding or wearing, including    Knots    and    Whorls   .  When cast from a    Spell Construct   , only the mana in the Construct\u0026#x27;s one Knot slot is counted.     Crowning Delusion                                                -\u0026gt;  Number       Returns the maximum amount of mana that the caster of the spell can store. Works similarly to the previous delusion.     Delusion of Order                                        -\u0026gt;   Number   |   Void        Returns the spell slot running this spell, or void if this spell is not running in a spell slot.     Macro Delusion                                                    -\u0026gt;  { Pattern  :   Spell  }        Returns a map containing the combined maps of all rings worn, with any entries that aren\u0026#x27;t valid macros filtered out.    The result of this trick is equal to the map used when evaluating macros.  See the entry on    Macros    for more details.     Framed Delusion                                      -\u0026gt;  Number       Returns the selected hotbar slot of the caster, if available.     Dimensional Delusion                                        -\u0026gt;  Dimension       Returns the dimension where this spell is being cast.       \n     \n     \n       \n     \n     \n     ","link":"delusions_ingresses/caster_tricks.html","extraTerms":[]},{"name":"Motive Verification Ingress","description":"Entity -\u003e EntityType","link":"delusions_ingresses/entity.html#trickster:get_entity_type","extraTerms":[]},{"name":"Locational Ingress","description":"Entity -\u003e Vector","link":"delusions_ingresses/entity.html#trickster:get_position","extraTerms":[]},{"name":"Perspective Ingress","description":"Entity -\u003e Vector","link":"delusions_ingresses/entity.html#trickster:get_eye_position","extraTerms":[]},{"name":"Directional Ingress","description":"Entity -\u003e Vector","link":"delusions_ingresses/entity.html#trickster:get_facing","extraTerms":[]},{"name":"Movement Ingress","description":"Entity -\u003e Vector","link":"delusions_ingresses/entity.html#trickster:get_velocity","extraTerms":[]},{"name":"Stature Ingress","description":"Entity -\u003e Number","link":"delusions_ingresses/entity.html#trickster:height_reflection","extraTerms":[]},{"name":"Alternative Ingress","description":"Entity -\u003e Boolean","link":"delusions_ingresses/entity.html#trickster:sneaking_reflection","extraTerms":[]},{"name":"Hearth\u0027s Ingress","description":"Entity -\u003e Boolean","link":"delusions_ingresses/entity.html#trickster:burning_reflection","extraTerms":[]},{"name":"Trekking Ingress","description":"Entity -\u003e Boolean","link":"delusions_ingresses/entity.html#trickster:sprinting_reflection","extraTerms":[]},{"name":"Guard Ingress","description":"Entity -\u003e Boolean","link":"delusions_ingresses/entity.html#trickster:blocking_reflection","extraTerms":[]},{"name":"Vigor Ingress","description":"Entity -\u003e Number","link":"delusions_ingresses/entity.html#trickster:get_max_health","extraTerms":[]},{"name":"Fettle Ingress","description":"Entity -\u003e Number","link":"delusions_ingresses/entity.html#trickster:get_health","extraTerms":[]},{"name":"Bulwark Ingress","description":"Entity -\u003e Number","link":"delusions_ingresses/entity.html#trickster:get_armour","extraTerms":[]},{"name":"Ingress of Occupation","description":"Entity -\u003e Number","link":"delusions_ingresses/entity.html#trickster:get_scale","extraTerms":[]},{"name":"Observer\u0027s Ingress","description":"Entity? -\u003e [Number]","link":"delusions_ingresses/entity.html#trickster:get_flecks","extraTerms":[]},{"name":"Ingress of Appetite","description":"Entity -\u003e Number","link":"delusions_ingresses/entity.html#trickster:get_player_food","extraTerms":[]},{"name":"Ingress of Fulfilment","description":"Entity -\u003e Number","link":"delusions_ingresses/entity.html#trickster:get_player_saturation","extraTerms":[]},{"name":"Entity Querying","description":"  Entity Querying   This collection of tricks provides options to gather information from entities in the world.  These tricks will blunder if their target is not being observed.  Keep in mind that entity fragments may    decay   .     Motive Verification Ingress                                     Entity   -\u0026gt;   EntityType       Given an entity, returns its type.     Locational Ingress                                     Entity   -\u0026gt;   Vector       Given an entity, returns the position of its feet.     Perspective Ingress                                     Entity   -\u0026gt;   Vector       Given an entity, returns the position of its head.     Directional Ingress                             Entity   -\u0026gt;   Vector       Given an entity, returns the facing of its head as a unit vector.     Movement Ingress                             Entity   -\u0026gt;   Vector       Given an entity, returns its current velocity as a vector in blocks per tick.     Stature Ingress                                   Entity   -\u0026gt;   Number       Given an entity, returns its height in blocks.     Alternative Ingress                             Entity   -\u0026gt;   Boolean       Given an entity, returns whether the entity is crouching. If the entity is unable to crouch, false will always be given.     Hearth\u0026#x27;s Ingress                                           Entity   -\u0026gt;   Boolean       Given an entity, returns whether the entity is on fire.     Trekking Ingress                               Entity   -\u0026gt;   Boolean       Given an entity, returns whether the entity is sprinting. If the entity is incapable of sprinting, false will always be given.     Guard Ingress                                       Entity   -\u0026gt;   Boolean       Given an entity, returns whether the entity is blocking using a shield.     Vigor Ingress                                             Entity   -\u0026gt;   Number       Given an entity, returns its maximum health. Blunders if the entity does not have health.     Fettle Ingress                                     Entity   -\u0026gt;   Number       Given an entity, returns its current health. Blunders if the entity does not have health.     Bulwark Ingress                                                         Entity   -\u0026gt;   Number       Given an entity, returns its total armor value. Blunders if the entity cannot have armor.     Ingress of Occupation                                     Entity   -\u0026gt;   Number       Returns the scale of the given entity. Blunders if the entity cannot scale.     Observer\u0026#x27;s Ingress                                         Entity ?    -\u0026gt;   [ Number  ]        Returns the identifiers of all the flecks the given player can see. If no player is supplied, the caster is queried for this information instead.     Ingress of Appetite                                   Entity   -\u0026gt;   Number       Given a player, returns their current food level.     Ingress of Fulfilment                                     Entity   -\u0026gt;   Number       Given a player, returns their current saturation.       \n     \n     \n       \n     \n     \n     ","link":"delusions_ingresses/entity.html","extraTerms":[]},{"name":"Embracing Ingress","description":"Vector, EntityType... | [EntityType] -\u003e Entity | Void","link":"delusions_ingresses/entity_locating.html#trickster:block_find_entity","extraTerms":[]},{"name":"Ingress of Shared Fate","description":"Vector, Number, EntityType... | [EntityType] -\u003e [Entity]","link":"delusions_ingresses/entity_locating.html#trickster:range_find_entity","extraTerms":[]},{"name":"Entity Targeting","description":"  Entity Targeting   These tricks may help to find and target entities in the world. Both of them may be optionally restricted to certain entity types by providing either a set of individual types, or a list.  They may give nothing when the position they target is not being observed.  Keep in mind that entity fragments may    decay   .     Embracing Ingress                                         Vector  ,    EntityType  ...   | [  EntityType  ]    -\u0026gt;    Entity   |   Void        Finds and returns an entity at a specific block position.     Ingress of Shared Fate                                         Vector  ,   Number  ,    EntityType  ...   | [  EntityType  ]    -\u0026gt;   [ Entity  ]        Finds and returns a list of all entities in the provided range around a specific block position.       \n     \n     \n       \n     \n     \n     ","link":"delusions_ingresses/entity_locating.html","extraTerms":[]},{"name":"Fence\u0027s Ingress","description":"Slot -\u003e Item","link":"delusions_ingresses/inventory.html#trickster:get_item_in_slot","extraTerms":[]},{"name":"Juggling Delusion","description":"-\u003e Item","link":"delusions_ingresses/inventory.html#trickster:other_hand","extraTerms":[]},{"name":"Catch Delusion","description":"-\u003e Slot","link":"delusions_ingresses/inventory.html#trickster:other_hand_slot","extraTerms":[]},{"name":"Intrusive Ingress","description":"Number -\u003e Slot\nNumber, Vector -\u003e Slot\nNumber, Entity -\u003e Slot","link":"delusions_ingresses/inventory.html#trickster:get_inventory_slot","extraTerms":[]},{"name":"Collector\u0027s Ingress","description":"Item... | [Item] -\u003e [Slot]\nVector, Item... | [Item] -\u003e [Slot]\nEntity, Item... | [Item] -\u003e [Slot]","link":"delusions_ingresses/inventory.html#trickster:get_inventory_slots","extraTerms":[]},{"name":"Ingress of Extent","description":"-\u003e Number\nVector -\u003e Number\nEntity -\u003e Number","link":"delusions_ingresses/inventory.html#trickster:get_inventory_size","extraTerms":[]},{"name":"Cranium Delusion","description":"-\u003e Number | Void","link":"delusions_ingresses/inventory.html#trickster:check_hat","extraTerms":[]},{"name":"Ingress of Authority","description":"Slot... | [Slot] -\u003e Number","link":"delusions_ingresses/inventory.html#trickster:get_mana_in_slot","extraTerms":[]},{"name":"Crowning Ingress","description":"Slot... | [Slot] -\u003e Number","link":"delusions_ingresses/inventory.html#trickster:get_max_mana_in_slot","extraTerms":[]},{"name":"Ingress of Plenitude","description":"Slot -\u003e Number","link":"delusions_ingresses/inventory.html#trickster:get_count_in_slot","extraTerms":[]},{"name":"Inventory Information","description":"  Inventory Information   These are tricks that pull information from an inventory. This can either be the caster\u0026#x27;s own, or an external block or entity.  It is not possible to interact with the inventories of players that are not the caster.     Fence\u0026#x27;s Ingress                                           Slot   -\u0026gt;   Item       Returns the type of item that the given slot contains.     Juggling Delusion                                  -\u0026gt;  Item       Returns the type of item in the caster\u0026#x27;s offhand.    Note: Slot References  Item slots may be referenced by spells. Creating such a reference comes at no cost. However, using the reference in a way that moves the items within the slot, will incur a move cost. This cost is equivalent to (distance * amount * 0.5G). Slot references either use the position of the caster at the time of move, or the position of their target when calculating cost.     Catch Delusion                                  -\u0026gt;  Slot       Returns a slot reference of the caster\u0026#x27;s offhand.     Intrusive Ingress                                                     Number   -\u0026gt;   Slot      Number  ,   Vector   -\u0026gt;   Slot      Number  ,   Entity   -\u0026gt;   Slot       Constructs and returns a slot from an index and an inventory source, using the caster if no source is given.     Collector\u0026#x27;s Ingress                                              Item  ...   | [  Item  ]    -\u0026gt;   [ Slot  ]       Vector  ,    Item  ...   | [  Item  ]    -\u0026gt;   [ Slot  ]       Entity  ,    Item  ...   | [  Item  ]    -\u0026gt;   [ Slot  ]        Returns a list of slots from an inventory source.    If no source is given, the caster\u0026#x27;s inventory is used. An item or list of items may be passed as a filter to get only relevant slots from the inventory source.     Ingress of Extent                                              -\u0026gt;  Number      Vector   -\u0026gt;   Number      Entity   -\u0026gt;   Number       Returns the number of slots in an inventory source, using the caster if no source is given.     Cranium Delusion                                            -\u0026gt;   Number   |   Void        Returns the selected slot in the caster\u0026#x27;s    Hat   .     Ingress of Authority                                            Slot  ...   | [  Slot  ]    -\u0026gt;   Number       Returns the amount of mana in the given slots.     Crowning Ingress                                                    Slot  ...   | [  Slot  ]    -\u0026gt;   Number       Returns the maximum amount of mana which may be stored in total in the given slots.     Ingress of Plenitude                                                 Slot   -\u0026gt;   Number       Returns the amount of items stored in the given slot.       \n     \n     \n       \n     \n     \n     ","link":"delusions_ingresses/inventory.html","extraTerms":[]},{"name":"Pinpoint Ingress","description":"Vector, Vector, Boolean? -\u003e Vector | Void\nEntity, Boolean? -\u003e Vector | Void","link":"delusions_ingresses/raycast.html#trickster:raycast","extraTerms":[]},{"name":"Mark Ingress","description":"Vector, Vector, Boolean? -\u003e Entity | Void\nEntity, Boolean? -\u003e Entity | Void","link":"delusions_ingresses/raycast.html#trickster:raycast_entity","extraTerms":[]},{"name":"Bearing Ingress","description":"Vector, Vector, Boolean? -\u003e Vector | Void\nEntity, Boolean? -\u003e Vector | Void","link":"delusions_ingresses/raycast.html#trickster:raycast_side","extraTerms":[]},{"name":"Raycasting","description":"  Raycasting   Raycasting tricks take either an entity or a position and a direction, and will give what the entity is looking at, or what the vectors are pointing to.  When using vectors, the first vector is interpreted as the position to start from, while the second is seen as a unit vector representing the look direction.    Raycasts which target blocks may optionally be made to hit fluids if their last argument is true.  If a raycast misses and does not hit anything of relevance within 64 blocks, void will be given.     Pinpoint Ingress                                 Vector  ,   Vector  ,   Boolean ?    -\u0026gt;    Vector   |   Void       Entity  ,   Boolean ?    -\u0026gt;    Vector   |   Void        Returns the position of the block that is hit.     Mark Ingress                                 Vector  ,   Vector  ,   Boolean ?    -\u0026gt;    Entity   |   Void       Entity  ,   Boolean ?    -\u0026gt;    Entity   |   Void        Returns the entity that is hit.     Bearing Ingress                                     Vector  ,   Vector  ,   Boolean ?    -\u0026gt;    Vector   |   Void       Entity  ,   Boolean ?    -\u0026gt;    Vector   |   Void          Returns a unit vector representing the side of the block that is hit.       \n     \n     \n       \n     \n     \n     ","link":"delusions_ingresses/raycast.html","extraTerms":[]},{"name":"Tricks","description":"  Tricks   Tricks are the base unit that spells are constructed from.  A trick takes inputs and/or outputs and either performs an operation on them, or creates side effects.       \n     \n     \n       \n     \n     \n     ","link":"tricks.html","extraTerms":[]},{"name":"Notulist\u0027s Ingress","description":"Slot? -\u003e Any | Void","link":"tricks/basic.html#trickster:read_spell","extraTerms":[]},{"name":"Notulist\u0027s Ploy","description":"Any, Slot?, String? -\u003e Any","link":"tricks/basic.html#trickster:write_spell","extraTerms":[]},{"name":"Proprietary Notulist\u0027s Ploy","description":"Any, Slot?, String? -\u003e Any","link":"tricks/basic.html#trickster:write_closed_spell","extraTerms":[]},{"name":"Alethophobe\u0027s Ploy","description":"Slot? -\u003e Void","link":"tricks/basic.html#trickster:clear_spell","extraTerms":[]},{"name":"Showcase Ploy","description":"Any... -\u003e Any","link":"tricks/basic.html#trickster:reveal","extraTerms":[]},{"name":"Crow Mind Delusion","description":"-\u003e Any","link":"tricks/basic.html#trickster:read_crow_mind","extraTerms":[]},{"name":"Crow Mind Ploy","description":"Any -\u003e Any","link":"tricks/basic.html#trickster:write_crow_mind","extraTerms":[]},{"name":"Basic Tricks","description":"  Basic Tricks     \u0026quot;The foundations are arguably the most important part of any skillset. There is no shame in revisiting them every now and then.\u0026quot;    -- An excerpt from a lecture by Prof. Olivine.    Note: Inscribed Fragments  A fragment can be inscribed onto any item that a player can hold in their inventory. If inscribed on a block, the fragment will be removed if the block is placed.  Some items may have additional interactions when inscribed with fragments,    Wands    for example will cast a spell fragment when right-clicked.     Notulist\u0026#x27;s Ingress                                         Slot ?    -\u0026gt;    Any   |   Void        Reads the fragment from the item in the given slot, or in the caster\u0026#x27;s offhand if no slot is given. Returns void if no fragment is inscribed.     Notulist\u0026#x27;s Ploy                                         Any  ,   Slot ?   ,   String ?    -\u0026gt;   Any       Inscribes a fragment onto the item in the given slot, or in the caster\u0026#x27;s offhand if no slot is given. Returns its input, after    decay   .     Proprietary Notulist\u0026#x27;s Ploy                                                   Any  ,   Slot ?   ,   String ?    -\u0026gt;   Any       Same as Notulist\u0026#x27;s Ploy, but the fragment cannot be read by conventional means.     Alethophobe\u0026#x27;s Ploy                                       Slot ?    -\u0026gt;   Void       Clears any inscribed fragment from the item in the given slot, or in the caster\u0026#x27;s offhand if no slot is given.     Showcase Ploy                                      Any  ...    -\u0026gt;   Any       Shows all given values as a chat message to the caster and returns the first.    Note: The Crow Mind  The Crow Mind, not to be confused with other black bird related minds, lets spells store and retrieve any one fragment,   persistently  , between casts.  This can be used for many things, such as counters, marking locations, and selecting targets.     Crow Mind Delusion                                        -\u0026gt;  Any       Returns the value currently stored in the caster\u0026#x27;s crow mind.     Crow Mind Ploy                                         Any   -\u0026gt;   Any       Stores the supplied value in the caster\u0026#x27;s Crow Mind, overwriting any value that might already be present.       \n     \n     \n       \n     \n     \n     ","link":"tricks/basic.html","extraTerms":[]},{"name":"Cost Ploy","description":"-\u003e Void","link":"tricks/cost.html#trickster:cost","extraTerms":[]},{"name":"Casting Cost","description":"  Casting Cost   After receiving multiple complaints at Tomfoolery Inc. HQ about the balance of this mod, we\u0026#x27;ve decided to properly implement material spell casting costs.  However, player freedom and choice is also very important to us. As such, this system operates on an opt-in basis.     Cost Ploy                                  -\u0026gt;  Void       Consumes one amethyst shard from the caster\u0026#x27;s inventory. Will blunder if none are available.       \n     \n     \n       \n     \n     \n     ","link":"tricks/cost.html","extraTerms":[]},{"name":"Assistance Deviation","description":"Item, Any... -\u003e Any","link":"tricks/imports.html#trickster:import","extraTerms":[]},{"name":"Cranium Deviation","description":"Number, Any... -\u003e Any","link":"tricks/imports.html#trickster:import_hat","extraTerms":[]},{"name":"Reusability","description":"  Reusability   Multiple patterns exist for easy reusability of spell fragments stored in the caster\u0026#x27;s inventory.  These directly execute spells stored in items with given arguments, which can potentially return fragments back to the calling spell, or have other side effects.     Assistance Deviation                                         Item  ,    Any  ...    -\u0026gt;   Any       Searches the caster\u0026#x27;s inventory for a specific item type. The first item of this type found to have an inscribed spell will be cast with the provided arguments.     Cranium Deviation                                                 Number  ,    Any  ...    -\u0026gt;   Any       Grabs the spell from the specified slot in the caster\u0026#x27;s    Hat   , casts it with the provided arguments, and returns the result.       \n     \n     \n       \n     \n     \n     ","link":"tricks/imports.html","extraTerms":[]},{"name":"Deviation of Suspension","description":"Number? -\u003e Number","link":"tricks/functions.html#trickster:delay_execution","extraTerms":[]},{"name":"Grand Deviation","description":"Spell, Any... -\u003e Any","link":"tricks/functions.html#trickster:execute","extraTerms":[]},{"name":"Quiet Deviation","description":"Spell -\u003e Any","link":"tricks/functions.html#trickster:execute_same_scope","extraTerms":[]},{"name":"Cautious Deviation","description":"Spell, Spell, Any... -\u003e Any","link":"tricks/functions.html#trickster:try_catch","extraTerms":[]},{"name":"Deviation of Singularity","description":"Spell, Any... -\u003e Any","link":"tricks/functions.html#trickster:atomic","extraTerms":[]},{"name":"Utensil Deviation","description":"Spell, Any... -\u003e Number | Void","link":"tricks/functions.html#trickster:fork","extraTerms":[]},{"name":"Folding Deviation","description":"Spell, Foldable, Any -\u003e Any","link":"tricks/functions.html#trickster:fold","extraTerms":[]},{"name":"Executioner\u0027s Deviation","description":"Number? -\u003e Boolean","link":"tricks/functions.html#trickster:kill_thread","extraTerms":[]},{"name":"Ingress of Origin","description":"Number? -\u003e Spell | Void","link":"tricks/functions.html#trickster:thread_root","extraTerms":[]},{"name":"Turtle\u0027s Ingress","description":"Number? -\u003e Number | Void","link":"tricks/functions.html#trickster:spell_state","extraTerms":[]},{"name":"Spell Deviations","description":"  Spell Deviations   Just as values can be created, passed around, and used by spells, so can parts of the spell itself.  When nesting one circle as a glyph inside another, but not immediately providing any subcircles to the outer circle, the outer circle will return the entire inner circle with all its subcircles and glyphs as a fragment.    This fragment can be used in a number of ways, including being written to an item using    Notulist\u0026#x27;s Ploy   , and being cast later or reused multiple times within the same spell.  It is also very possible to pass a spell fragment inside of itself, and cast it again there, using recursion to create repeating behaviour.     Deviation of Suspension                                     Number ?    -\u0026gt;   Number       Delays the execution of the current spell by the given number of ticks, or until the next tick. Returns the delay.     Grand Deviation                                             Spell  ,    Any  ...    -\u0026gt;   Any       Casts the given spell fragment, providing it with all additional given fragments as arguments, in order of their appearance.     Quiet Deviation                                         Spell   -\u0026gt;   Any       Casts the given spell with the current spell\u0026#x27;s arguments.     Cautious Deviation                                           Spell  ,   Spell  ,    Any  ...    -\u0026gt;   Any       Attempts to execute the first spell. If it blunders, the second spell is run and the blunder is silenced. Excess values are arguments to both.     Deviation of Singularity                                             Spell  ,    Any  ...    -\u0026gt;   Any       Executes the given spell in a single tick, blundering if this cannot be guaranteed due to spell size or illegal operations.    If there are not enough circle evaluations available in the tick that this trick is used, there will be a one tick delay before the entirety of the given spell is run at once.  Illegal operations include the following:       Deviation of Suspension   .      Ploy of Receipt   .   Any Deviation which evaluates a sub-spell.   Implicit sub-spell evaluation.      Utensil Deviation                                             Spell  ,    Any  ...    -\u0026gt;    Number   |   Void        Dispatches the given spell to another spell slot.    If the caster doesn\u0026#x27;t support spell slots, this trick will blunder. If there are no free spell slots, this trick will return void. Otherwise, the index of the spell slot which was dispatched to is returned.    Note: Foldables    Foldables   are fragments which contain other fragments and may be accessed using a specific key. Lists are   Foldables   where the key is a whole number between zero and the size of the list, exclusive. Maps are also   Foldables  , though their keys may be any value and aren\u0026#x27;t automatically determined by order of insertion.     Folding Deviation                                             Spell  ,   Foldable  ,   Any   -\u0026gt;   Any       For each entry in the   Foldable  , execute the given spell, with the given fragment as the first result.    Each iteration receives four arguments:     Any  ,   Any  ,   Any  ,   Foldable     These represent the following values, in order:   The result of the last iteration.   The current value.   The key of the current value.   The full   Foldable  .     The result of each execution is passed as the first argument to the next, where the last\u0026#x27;s result is the return value of this trick overall.    Note: Arguments  Fragments can be passed into executed spell fragments as arguments.  See the chapter on    arguments    for more information.     Executioner\u0026#x27;s Deviation                                           Number ?    -\u0026gt;   Boolean       Ends the spell running in the given spell slot or the current slot if none is provided. Returns whether it succeeded.     Ingress of Origin                                         Number ?    -\u0026gt;    Spell   |   Void        Fetches the original spell that spawned the given spell slot, or the current slot if none is provided.     Turtle\u0026#x27;s Ingress                                   Number ?    -\u0026gt;    Number   |   Void        Returns the number of circles that were executed in the last tick in a given spell slot, or the current slot if none is provided.       \n     \n     \n       \n     \n     \n     ","link":"tricks/functions.html","extraTerms":[]},{"name":"Ploy of Transmogrification","description":"Slot, Item -\u003e Boolean","link":"tricks/transmog.html#trickster:transmog","extraTerms":[]},{"name":"Ploy of Subterfuge","description":"Slot -\u003e Boolean","link":"tricks/transmog.html#trickster:hidden_transmog","extraTerms":[]},{"name":"Ploy of Origin","description":"Slot -\u003e Boolean","link":"tricks/transmog.html#trickster:remove_transmog","extraTerms":[]},{"name":"Ingress of Transmogrification","description":"Slot -\u003e Item | Void","link":"tricks/transmog.html#trickster:get_transmog","extraTerms":[]},{"name":"Transmogrification","description":"  Transmogrification   It seems that, unlike some, this world supports the transmogrification of one item into another.  Transmogrification is a way to change purely the appearance of items, keeping all their attributes and other behaviour intact.     Ploy of Transmogrification                                             Slot  ,   Item   -\u0026gt;   Boolean       Transmogrifies the item in the given slot to appear as the given item. Returns true if changes were made.     Ploy of Subterfuge                                                 Slot   -\u0026gt;   Boolean       Applies a void transmogrification to the item in the given slot. Returns true if changes were made.     Ploy of Origin                                             Slot   -\u0026gt;   Boolean       Removes any transmogrification from the item in the given slot. Returns true if changes were made.     Ingress of Transmogrification                                                 Slot   -\u0026gt;    Item   |   Void        Returns the transmogrification on the item in the given slot, or void if none is applied.       \n     \n     \n       \n     \n     \n     ","link":"tricks/transmog.html","extraTerms":[]},{"name":"Distortions \u0026 Stratagems","description":"  Distortions \u0026amp; Stratagems   Distortion tricks purely manipulate data. When given the same set of inputs, these will always give the same output.  Stratagem tricks are distortions which take a variable amount of inputs.       \n     \n     \n       \n     \n     \n     ","link":"distortions.html","extraTerms":[]},{"name":"Annexation Stratagem","description":"Addable... | [Addable] -\u003e Addable","link":"distortions/arithmetic.html#trickster:add","extraTerms":[]},{"name":"Desertion Stratagem","description":"Subtractable... | [Subtractable] -\u003e Subtractable","link":"distortions/arithmetic.html#trickster:subtract","extraTerms":[]},{"name":"Domination Stratagem","description":"Multiplicable... | [Multiplicable] -\u003e Multiplicable","link":"distortions/arithmetic.html#trickster:multiply","extraTerms":[]},{"name":"Submission Stratagem","description":"Divisible... | [Divisible] -\u003e Divisible","link":"distortions/arithmetic.html#trickster:divide","extraTerms":[]},{"name":"Distortion of Wholes","description":"Number, Number -\u003e Number","link":"distortions/arithmetic.html#trickster:modulo","extraTerms":[]},{"name":"Distortion of Supremacy","description":"Number, Number -\u003e Number","link":"distortions/arithmetic.html#trickster:power","extraTerms":[]},{"name":"Distortion of Inferiority","description":"Number, Number -\u003e Number","link":"distortions/arithmetic.html#trickster:logarithm","extraTerms":[]},{"name":"Noble Stratagem","description":"Number... | [Number] -\u003e Number","link":"distortions/arithmetic.html#trickster:max","extraTerms":[]},{"name":"Insignificance Stratagem","description":"Number... | [Number] -\u003e Number","link":"distortions/arithmetic.html#trickster:min","extraTerms":[]},{"name":"Distortion of Grandeur","description":"Roundable -\u003e Roundable","link":"distortions/arithmetic.html#trickster:ceil","extraTerms":[]},{"name":"Distortion of Humility","description":"Roundable -\u003e Roundable","link":"distortions/arithmetic.html#trickster:floor","extraTerms":[]},{"name":"Distortion of Objectivity","description":"Roundable -\u003e Roundable","link":"distortions/arithmetic.html#trickster:round","extraTerms":[]},{"name":"Distortion of Decline","description":"Number -\u003e Number","link":"distortions/arithmetic.html#trickster:sqrt","extraTerms":[]},{"name":"Inversion Distortion","description":"Number -\u003e Number\nVector -\u003e Vector","link":"distortions/arithmetic.html#trickster:invert","extraTerms":[]},{"name":"Absolutist\u0027s Distortion","description":"Number -\u003e Number","link":"distortions/arithmetic.html#trickster:abs","extraTerms":[]},{"name":"Primary Distortion of Geometry","description":"Number -\u003e Number","link":"distortions/arithmetic.html#trickster:sin","extraTerms":[]},{"name":"Secondary Distortion of Geometry","description":"Number -\u003e Number","link":"distortions/arithmetic.html#trickster:cos","extraTerms":[]},{"name":"Tertiary Distortion of Geometry","description":"Number -\u003e Number","link":"distortions/arithmetic.html#trickster:tan","extraTerms":[]},{"name":"Primary Inverse Distortion of Geometry","description":"Number -\u003e Number","link":"distortions/arithmetic.html#trickster:arcsin","extraTerms":[]},{"name":"Secondary Inverse Distortion of Geometry","description":"Number -\u003e Number","link":"distortions/arithmetic.html#trickster:arccos","extraTerms":[]},{"name":"Tertiary Inverse Distortion of Geometry","description":"Number -\u003e Number","link":"distortions/arithmetic.html#trickster:arctan","extraTerms":[]},{"name":"Cartesian Angle Distortion","description":"Number, Number -\u003e Number","link":"distortions/arithmetic.html#trickster:arctan2","extraTerms":[]},{"name":"Arithmetic","description":"  Arithmetic   The following patterns regard basic arithmetic and mathematical operations.  Some of the base arithmetic tricks accept a combination of types of fragment. These will have their signatures labelled with, for example,   Addable   or   Roundable  . These terms are shorthands for a combination of options:      Addable   and   Subtractable   are either   Numbers  ,   Vectors  , or   Patterns  .    Multiplicable  ,   Divisible  , and   Roundable   are only   Numbers   or   Vectors  .    Distortions here that take many arguments at once will apply their operation cumulatively. For example:  1, 2, 3 into Annexation Stratagem \u003d 1 + 2 + 3 \u003d 6  or  1, 2, 3 into Submission Stratagem \u003d 1 / 2 / 3 \u003d 0.1666...     Annexation Stratagem                                    Addable  ...   | [  Addable  ]    -\u0026gt;   Addable       Adds fragments together.     Desertion Stratagem                                    Subtractable  ...   | [  Subtractable  ]    -\u0026gt;   Subtractable       Subtracts multiple fragments from the first fragment.     Domination Stratagem                                      Multiplicable  ...   | [  Multiplicable  ]    -\u0026gt;   Multiplicable       Multiplies a bunch of fragments.     Submission Stratagem                                      Divisible  ...   | [  Divisible  ]    -\u0026gt;   Divisible       Divides fragments sequentially, starting from the first.     Distortion of Wholes                                         Number  ,   Number   -\u0026gt;   Number       Returns the remainder of dividing the first number by the second number.     Distortion of Supremacy                             Number  ,   Number   -\u0026gt;   Number       Returns the first number raised to the power of the second.     Distortion of Inferiority                             Number  ,   Number   -\u0026gt;   Number       Given two numbers, returns the power that the first number must be raised by to equal the second.     Noble Stratagem                              Number  ...   | [  Number  ]    -\u0026gt;   Number       Returns the highest of its input values.     Insignificance Stratagem                              Number  ...   | [  Number  ]    -\u0026gt;   Number       Returns the lowest of its input values.     Distortion of Grandeur                               Roundable   -\u0026gt;   Roundable       Returns the value of the input rounded up.     Distortion of Humility                               Roundable   -\u0026gt;   Roundable       Returns the value of the input rounded down.     Distortion of Objectivity                                 Roundable   -\u0026gt;   Roundable       Returns the rounded value of the input.     Distortion of Decline                               Number   -\u0026gt;   Number       Returns the square root of the input.     Inversion Distortion                                 Number   -\u0026gt;   Number      Vector   -\u0026gt;   Vector       Inverts the given number or vector.     Absolutist\u0026#x27;s Distortion                                 Number   -\u0026gt;   Number       If the given number is negative, returns its positive equivalent. Otherwise, returns the number as-is.     Primary Distortion of Geometry                               Number   -\u0026gt;   Number       Returns the sine of the given number.     Secondary Distortion of Geometry                               Number   -\u0026gt;   Number       Returns the cosine of the given number.     Tertiary Distortion of Geometry                             Number   -\u0026gt;   Number       Returns the tangent of the given number.     Primary Inverse Distortion of Geometry                               Number   -\u0026gt;   Number       Returns the arcsine of the given number.     Secondary Inverse Distortion of Geometry                               Number   -\u0026gt;   Number       Returns the arccosine of the given number.     Tertiary Inverse Distortion of Geometry                             Number   -\u0026gt;   Number       Returns the arctangent of the given number.     Cartesian Angle Distortion                                     Number  ,   Number   -\u0026gt;   Number       Returns the angle measure between positive X axis and the ray from the origin to the point (y, x).       \n     \n     \n       \n     \n     \n     ","link":"distortions/arithmetic.html","extraTerms":[]},{"name":"Decision Distortion","description":"(Boolean, Any)..., Any -\u003e Any","link":"distortions/boolean.html#trickster:if_else","extraTerms":[]},{"name":"Parity Stratagem","description":"Any... -\u003e Boolean","link":"distortions/boolean.html#trickster:equals","extraTerms":[]},{"name":"Disparity Stratagem","description":"Any... -\u003e Boolean","link":"distortions/boolean.html#trickster:not_equals","extraTerms":[]},{"name":"Stratagem Bar None","description":"Boolean... -\u003e Boolean","link":"distortions/boolean.html#trickster:all","extraTerms":[]},{"name":"Stratagem In General","description":"Boolean... -\u003e Boolean","link":"distortions/boolean.html#trickster:any","extraTerms":[]},{"name":"Stratagem In Absence","description":"Boolean... -\u003e Boolean","link":"distortions/boolean.html#trickster:none","extraTerms":[]},{"name":"Lesser Distortion","description":"Number, Number -\u003e Boolean","link":"distortions/boolean.html#trickster:lesser_than","extraTerms":[]},{"name":"Greater Distortion","description":"Number, Number -\u003e Boolean","link":"distortions/boolean.html#trickster:greater_than","extraTerms":[]},{"name":"Boolean Logic","description":"  Boolean Logic   This chapter describes a few patterns that can be used to perform boolean logic operations.  While glyphs here indicate they require a boolean input, it is worth noting that   any fragment will be automatically coerced into a boolean value   when required.    Boolean values are created from any fragment based on the following logic:   If the fragment is   Void  , it is   false  .   If the fragment is   ##Zalgo##  , it is   false  .   If the fragment is   false  , it is   false  .   Otherwise, it is   true  .      Decision Distortion                                    ( Boolean  ,   Any  )   ...   ,   Any   -\u0026gt;   Any       This trick allows spells to use different fragments or even branch their behaviour based on certain criteria.    Decision Distortion takes one or multiple pairs of booleans and values. The value after the first boolean that is true will be returned. If all booleans are false, a fallback value that   must   be specified at the end is returned instead.  For example:  Giving this trick the arguments of   true, 1, 2   will make it return   1  , as the boolean forms a pair with   1  , and evaluates to   true  .    Alternatively:  Giving Decision Distortion the arguments of   false, 1, false, 2, 3   is also valid, and will see it return the fallback value, which is   3  .  And since any fragment counts as a boolean, giving it   void, 1, 2, 3, 4   will have it return   3  , since the   2   and   3   form a pair where the   2   evaluates to   true  .     Parity Stratagem                                  Any  ...    -\u0026gt;   Boolean       Checks for equality between many inputs. Will only return true if all inputs are equal.     Disparity Stratagem                                      Any  ...    -\u0026gt;   Boolean       Checks for inequality between many inputs. Will return false if any input is equal to any other.     Stratagem Bar None                                      Boolean  ...    -\u0026gt;   Boolean       Will only return true if all inputs are true.     Stratagem In General                                  Boolean  ...    -\u0026gt;   Boolean       Will return true if any provided input is true.     Stratagem In Absence                                  Boolean  ...    -\u0026gt;   Boolean       Will return true if none of the provided inputs are true.     Lesser Distortion                             Number  ,   Number   -\u0026gt;   Boolean       Returns whether the first number is lesser than the second.     Greater Distortion                             Number  ,   Number   -\u0026gt;   Boolean       Returns whether the first number is greater than the second.       \n     \n     \n       \n     \n     \n     ","link":"distortions/boolean.html","extraTerms":[]},{"name":"Placement Distortion","description":"Item -\u003e Block | Void","link":"distortions/inventory.html#trickster:block_from_item","extraTerms":[]},{"name":"Pickup Distortion","description":"Block -\u003e Item | Void","link":"distortions/inventory.html#trickster:item_from_block","extraTerms":[]},{"name":"Distortion of Breadth","description":"Item -\u003e Number","link":"distortions/inventory.html#trickster:get_max_count","extraTerms":[]},{"name":"Items","description":"  Items   Tricks that transform item-related fragments.     Placement Distortion                                     Item   -\u0026gt;    Block   |   Void        Returns the block type the given item type can be placed as, or void if the item is not a block.     Pickup Distortion                                     Block   -\u0026gt;    Item   |   Void        Returns the item type that can be used to place the given block type, or void if the block doesn\u0026#x27;t have a corresponding item.     Distortion of Breadth                                                 Item   -\u0026gt;   Number       Returns the maximum stack size of the given item.       \n     \n     \n       \n     \n     \n     ","link":"distortions/inventory.html","extraTerms":[]},{"name":"Catalogue Delusion","description":"-\u003e [Any]","link":"distortions/list.html#trickster:list_create","extraTerms":[]},{"name":"Tally Distortion","description":"[Any] -\u003e Number","link":"distortions/list.html#trickster:list_size","extraTerms":[]},{"name":"Expansion Stratagem","description":"[Any], Any... -\u003e [Any]","link":"distortions/list.html#trickster:list_add","extraTerms":[]},{"name":"Collection Stratagem","description":"[Any], [Any]... -\u003e [Any]","link":"distortions/list.html#trickster:list_add_range","extraTerms":[]},{"name":"Isolation Distortion","description":"[Any], Number, Number? -\u003e [Any]","link":"distortions/list.html#trickster:list_take_range","extraTerms":[]},{"name":"Counter Distortion","description":"[Any] -\u003e [Any]","link":"distortions/list.html#trickster:list_reverse","extraTerms":[]},{"name":"Inflation Stratagem","description":"[Any], Number, Any... -\u003e [Any]","link":"distortions/list.html#trickster:list_insert","extraTerms":[]},{"name":"Extraction Distortion","description":"[Any], Number -\u003e Any","link":"distortions/list.html#trickster:list_get","extraTerms":[]},{"name":"Locating Distortion","description":"[Any], Any -\u003e Number | Void","link":"distortions/list.html#trickster:list_index_of","extraTerms":[]},{"name":"Expulsion Stratagem","description":"[Any], Number... | [Number] -\u003e [Any]","link":"distortions/list.html#trickster:list_remove","extraTerms":[]},{"name":"Eviction Stratagem","description":"[Any], Any... -\u003e [Any]","link":"distortions/list.html#trickster:list_remove_element","extraTerms":[]},{"name":"Interlude Distortion","description":"Number, Number -\u003e [Number]","link":"distortions/list.html#trickster:create_number_range","extraTerms":[]},{"name":"Lists","description":"  Lists   Within spells, it is possible to create lists of an arbitrary amount of fragments merged into a single value.  Lists are zero indexed.     Catalogue Delusion                                  -\u0026gt;  [ Any  ]        Creates a new empty list.     Tally Distortion                                   [ Any  ]    -\u0026gt;   Number       Returns the amount of elements in the given list.     Expansion Stratagem                                       [ Any  ]   ,    Any  ...    -\u0026gt;   [ Any  ]        Appends one or many elements to the end of the given list.     Collection Stratagem                                         [ Any  ]   ,    [ Any  ]   ...    -\u0026gt;   [ Any  ]        Creates a new list containing the elements of all given lists.     Isolation Distortion                                         [ Any  ]   ,   Number  ,   Number ?    -\u0026gt;   [ Any  ]        Returns a list containing the elements of the given list with indexes starting at the first number and ending before the second.     Counter Distortion                                 [ Any  ]    -\u0026gt;   [ Any  ]        Returns the given list, reversed.     Inflation Stratagem                                     [ Any  ]   ,   Number  ,    Any  ...    -\u0026gt;   [ Any  ]        Inserts one or many elements at a specific position in the given list.     Extraction Distortion                                     [ Any  ]   ,   Number   -\u0026gt;   Any       Finds and returns an element from the given list based on index.     Locating Distortion                                         [ Any  ]   ,   Any   -\u0026gt;    Number   |   Void        Finds and returns the index of a specific element in the given list, or void if the element is not in the list.     Expulsion Stratagem                                     [ Any  ]   ,    Number  ...   | [  Number  ]    -\u0026gt;   [ Any  ]        Removes one or many elements from the given list by their index. Indexes do not move around mid-removal.     Eviction Stratagem                                       [ Any  ]   ,    Any  ...    -\u0026gt;   [ Any  ]        Removes one or many elements from the given list by checking their equality with the set of given fragments.     Interlude Distortion                                         Number  ,   Number   -\u0026gt;   [ Number  ]        Returns a list containing the range of integer numbers starting at the first given number and ending before the second.       \n     \n     \n       \n     \n     \n     ","link":"distortions/list.html","extraTerms":[]},{"name":"Cartographer\u0027s Delusion","description":"-\u003e {Any: Any}","link":"distortions/map.html#trickster:map_create","extraTerms":[]},{"name":"Charting Stratagem","description":"{Any: Any}, (Any, Any)... -\u003e {Any: Any}","link":"distortions/map.html#trickster:map_insert","extraTerms":[]},{"name":"Navigator\u0027s Distortion","description":"{Any: Any}, Any -\u003e Any | Void","link":"distortions/map.html#trickster:map_get","extraTerms":[]},{"name":"Admiral\u0027s Stratagem","description":"{Any: Any}... | [{Any: Any}] -\u003e {Any: Any}","link":"distortions/map.html#trickster:map_merge","extraTerms":[]},{"name":"Stratagem of Annulment","description":"{Any: Any}, Any... | [Any] -\u003e {Any: Any}","link":"distortions/map.html#trickster:map_remove","extraTerms":[]},{"name":"Maps","description":"  Maps   This chapter describes patterns that can be used to work with maps. Maps allow for an association between one fragment and another, similarly to how a dictionary associates a word with a definition.     Cartographer\u0026#x27;s Delusion                                  -\u0026gt;  { Any  :   Any  }        Creates a new empty map.     Charting Stratagem                                       { Any  :   Any  }   ,    ( Any  ,   Any  )   ...    -\u0026gt;   { Any  :   Any  }        Inserts key-value pairs into the given map.     Navigator\u0026#x27;s Distortion                                         { Any  :   Any  }   ,   Any   -\u0026gt;    Any   |   Void        If there is a value associated with the given fragment, returns it. Otherwise, returns void.     Admiral\u0026#x27;s Stratagem                                          { Any  :   Any  }   ...   | [  { Any  :   Any  }   ]    -\u0026gt;   { Any  :   Any  }        Combines many maps into one. Duplicate entries are prioritized by input index.     Stratagem of Annulment                                     { Any  :   Any  }   ,    Any  ...   | [  Any  ]    -\u0026gt;   { Any  :   Any  }        Removes entries from the given map which have any of the given keys.       \n     \n     \n       \n     \n     \n     ","link":"distortions/map.html","extraTerms":[]},{"name":"Argumentative Distortion","description":"Any -\u003e Type","link":"distortions/misc.html#trickster:type_fragment","extraTerms":[]},{"name":"Decaying Distortion","description":"Any... -\u003e Number","link":"distortions/misc.html#trickster:hash_values","extraTerms":[]},{"name":"Interpretation Distortion","description":"Pattern -\u003e PatternLiteral","link":"distortions/misc.html#trickster:escape_pattern","extraTerms":[]},{"name":"Distortion of Memory","description":"Any -\u003e Number","link":"distortions/misc.html#trickster:weight","extraTerms":[]},{"name":"Misc Distortions","description":"  Misc Distortions   A few miscellaneous distortions that don\u0026#x27;t fit into any other category.     Argumentative Distortion                                   Any   -\u0026gt;   Type       Returns the type of the given fragment. Can be used to validate inputs, among other things.     Decaying Distortion                                    Any  ...    -\u0026gt;   Number       Combines all given inputs into a single, arbitrary number. The same inputs will always produce the same number.     Interpretation Distortion                                     Pattern   -\u0026gt;   PatternLiteral       Converts a pattern into a literal representation of itself, to be used when constructing spells.     Distortion of Memory                                 Any   -\u0026gt;   Number       Returns a number from zero to one indicating how close the given fragment is to being overweight.       \n     \n     \n       \n     \n     \n     ","link":"distortions/misc.html","extraTerms":[]},{"name":"Supply Distortion","description":"Any -\u003e Spell","link":"distortions/tree.html#trickster:supplier","extraTerms":[]},{"name":"Distortion of Closure","description":"Spell, {Any: Any} -\u003e Spell","link":"distortions/tree.html#trickster:closure","extraTerms":[]},{"name":"Pinpoint Distortion","description":"Spell, Any -\u003e [Number] | Void","link":"distortions/tree.html#trickster:locate_glyph","extraTerms":[]},{"name":"Discovering Distortion","description":"Spell, Any -\u003e [[Number]]","link":"distortions/tree.html#trickster:locate_glyphs","extraTerms":[]},{"name":"Retrieval Distortion","description":"Spell, [Number] -\u003e Any | Void","link":"distortions/tree.html#trickster:retrieve_glyph","extraTerms":[]},{"name":"Replacement Distortion","description":"Spell, [Number], Any -\u003e Spell","link":"distortions/tree.html#trickster:set_glyph","extraTerms":[]},{"name":"Bundle Distortion","description":"Spell -\u003e [Spell]","link":"distortions/tree.html#trickster:get_subparts","extraTerms":[]},{"name":"Felling Distortion","description":"Spell, [Number] -\u003e Spell | Void","link":"distortions/tree.html#trickster:retrieve_subtree","extraTerms":[]},{"name":"Grafting Distortion","description":"Spell, [Number], Spell -\u003e Spell","link":"distortions/tree.html#trickster:set_subtree","extraTerms":[]},{"name":"Branching Distortion","description":"Spell, [Number], Spell -\u003e Spell","link":"distortions/tree.html#trickster:add_subtree","extraTerms":[]},{"name":"Pruning Distortion","description":"Spell, [Number] -\u003e Spell | Void","link":"distortions/tree.html#trickster:remove_subtree","extraTerms":[]},{"name":"Spells","description":"  Spells   Although    Scribing Patterns    allow for spells to be edited before they are cast, the following patterns allow for a spell to modify other spells   during   the cast.     Supply Distortion                                         Any   -\u0026gt;   Spell       Creates a new spell fragment which returns the previously provided fragment when executed.     Distortion of Closure                                     Spell  ,   { Any  :   Any  }    -\u0026gt;   Spell       Replaces the keys of the map that are in the given spell with the value they map to.    Any values anywhere in the given spell will be replaced. This could be constants in glyphs, patterns, and inner circles, but also entire subtrees of the spell.  Values that are a part of inner circles or subspells will   also   be replaced.    Note: Addresses  Just as elements of a list are accessed by their index, parts of a spell are accessed by their address. An address is a list of integers that forms a path to a specific circle in a spell.  Addresses can be found using    Address Revision   .  To manually find the address of a circle, start at the central circle in the spell.    Next, find the sub-circle attached to the central circle that is in the path to the circle you are finding the address of. Take the index of that circle, which is the number of circles that come before it, counterclockwise.   Repeat this process, adding each index to the list until you reach the circle you are finding the address of. The list you constructed is the address to that circle.     Pinpoint Distortion                                         Spell  ,   Any   -\u0026gt;    [ Number  ]    |   Void        Returns the address of the first circle in the given spell with a glyph matching the given fragment. The spell is searched using    BFS   .     Discovering Distortion                                           Spell  ,   Any   -\u0026gt;   [ [ Number  ]   ]        Returns a list of all the addresses of circles in the given spell with a glyph matching the given fragment.     Retrieval Distortion                                     Spell  ,   [ Number  ]    -\u0026gt;    Any   |   Void        Returns the glyph of the circle at the given address.     Replacement Distortion                                     Spell  ,   [ Number  ]   ,   Any   -\u0026gt;   Spell       Replaces the glyph of the circle at the given address with the given fragment.     Bundle Distortion                                           Spell   -\u0026gt;   [ Spell  ]        Returns the branches of a spell as a list.     Felling Distortion                                             Spell  ,   [ Number  ]    -\u0026gt;    Spell   |   Void        Returns the circle (and its branches) at the given address.     Grafting Distortion                                             Spell  ,   [ Number  ]   ,   Spell   -\u0026gt;   Spell       Grafts the latter spell into the former, replacing the circle at the given address.     Branching Distortion                                             Spell  ,   [ Number  ]   ,   Spell   -\u0026gt;   Spell       Attaches the latter spell to the circle at the given address as a new branch.     Pruning Distortion                                             Spell  ,   [ Number  ]    -\u0026gt;    Spell   |   Void        Removes the circle at the given address. Returns void if the root node is removed.       \n     \n     \n       \n     \n     \n     ","link":"distortions/tree.html","extraTerms":[]},{"name":"Primary Distortion","description":"Vector -\u003e Number","link":"distortions/vector.html#trickster:extract_x","extraTerms":[]},{"name":"Secondary Distortion","description":"Vector -\u003e Number","link":"distortions/vector.html#trickster:extract_y","extraTerms":[]},{"name":"Tertiary Distortion","description":"Vector -\u003e Number","link":"distortions/vector.html#trickster:extract_z","extraTerms":[]},{"name":"Absorption Distortion","description":"Number, Number, Number -\u003e Vector","link":"distortions/vector.html#trickster:merge_vector","extraTerms":[]},{"name":"Magnitude Distortion","description":"Vector -\u003e Number","link":"distortions/vector.html#trickster:length","extraTerms":[]},{"name":"Alignment Distortion","description":"Vector, Vector -\u003e Number","link":"distortions/vector.html#trickster:dot_product","extraTerms":[]},{"name":"Perpendicular Distortion","description":"Vector, Vector -\u003e Vector","link":"distortions/vector.html#trickster:cross_product","extraTerms":[]},{"name":"Regularity Distortion","description":"Vector -\u003e Vector","link":"distortions/vector.html#trickster:normalize","extraTerms":[]},{"name":"Aligned Regularity Distortion","description":"Vector -\u003e Vector","link":"distortions/vector.html#trickster:align_vector","extraTerms":[]},{"name":"Vectors","description":"  Vectors   While much vector math can be done with basic    arithmetic    patterns, some operations require more specialized functionality. This chapter provides some of these.     Primary Distortion                             Vector   -\u0026gt;   Number       Returns the X component of the given vector.     Secondary Distortion                             Vector   -\u0026gt;   Number       Returns the Y component of the given vector.     Tertiary Distortion                             Vector   -\u0026gt;   Number       Returns the Z component of the given vector.     Absorption Distortion                                     Number  ,   Number  ,   Number   -\u0026gt;   Vector       Merges three input numbers into a vector.     Magnitude Distortion                                   Vector   -\u0026gt;   Number       Returns the length of the given vector.     Alignment Distortion                                       Vector  ,   Vector   -\u0026gt;   Number       Returns the dot product of the given vectors.     Perpendicular Distortion                                   Vector  ,   Vector   -\u0026gt;   Vector       Returns the cross product of the given vectors.     Regularity Distortion                                 Vector   -\u0026gt;   Vector       Normalizes the given vector to a length of one.     Aligned Regularity Distortion                                   Vector   -\u0026gt;   Vector       Normalizes the given vector to a length of one and aligns it to the nearest cardinal axis.       \n     \n     \n       \n     \n     \n     ","link":"distortions/vector.html","extraTerms":[]},{"name":"Tutorials","description":"  Tutorials   Start learning circle-based magic here. This category contains a set of linear tutorials to take you through the most important concepts.       \n     \n     \n       \n     \n     \n     ","link":"tutorials.html","extraTerms":[]},{"name":"1. Getting Started","description":"  1. Getting Started   To begin writing spells, you\u0026#x27;ll need to gather a few magical tools to help you.  At a bare minimum, you\u0026#x27;ll need a    Mirror of Evaluation    and a    Scroll and Quill   . These items form the basis of a spellcaster\u0026#x27;s toolkit.          The Scroll and Quill is where you actually write your spells. These enchanted pieces of paper can hold any single spell circle, and allow you to easily modify it, just by using the item.          The Mirror, which you\u0026#x27;ll also need, serves a variety of purposes.  For one, it can be used to directly cast the spells you write in scrolls, something that scrolls cannot do on their own.  More often though, the mirror will be used for prototyping.    It functions very much like a scroll, with a similar interface, except that any glyphs written in a mirror will be cast the moment its possible to. The center of their circle will then be filled with the result of their execution, if any.  This behaviour is also often used to generate constant values, which can then be embedded into other spells, written in scrolls.     Aside from these essential items, a few other things may be worth gathering:   A    Wand    can be inscribed with any spell to directly cast it, as explained later.   A    Hat    holds multiple scrolls in one item, and can serve as a form of memory for more advanced spells.        \n     \n     \n       \n     \n     \n     ","link":"tutorials/1_getting_started.html","extraTerms":[]},{"name":"2. The Basics of Mana","description":"  2. The Basics of Mana   To be able to do any proper spellcasting, you\u0026#x27;ll need access to   Mana  . Any spell that affects the world will consume a certain amount of Mana, scaling significantly for larger effects.  Amounts of Mana can be measured in Gandalfs, or G, named after a certain famous wizard.     One Gandalf is defined as the amount of magical energy required to light a candle.  Mana can be persistently stored in Knots, like the one below:           These gemstones encased in glass orbs hold a certain amount of Mana based on the rarity of the gem they\u0026#x27;re made from. Some gems also have unique properties when made into a Knot, such as Amethyst, which, unlike other gems, already contains Mana when converted, but cannot be refilled by any known means.  This makes Amethyst Knots a great source of Mana to get started with, or when in a pinch.          Most Knots, though, can be refilled by simply exposing them to the night sky. Either by throwing them on the ground, or placing them inside a    Charging Array   . Rechargeable Knots thrown on the ground will not despawn. They will charge most quickly at or near full or new moons, but not at all on some days in between.    Knots also keep track of their current draw rate in their tooltip, measured in Merlins, or M. Merlins are defined as Gandalfs per Tick, Ticks being the smallest unit of meaningful time, at 1/20th of a second.  For example, a spell drawing 50 M would consume 1 kiloGandalf per second.           To actually create a Knot, one can simply use    Ploy of the Moon Watcher    while having an Amethyst and Glass Block in their inventory. An Amethyst Knot costs no Mana to create, as it can provide its own power, but any other Knot requires an appropriate amount of Mana to be constructed, as detailed    here   .    Other Knot types will also require the caster to specify the slot containing the appropriate gem as a first argument, but this will be covered later.  For now, drawing the    Ploy of the Moon Watcher    in your    Mirror of Evaluation    as follows will allow you to create Amethyst Knots with ease. Create a few of these before continuing!       (() \u003d\u003e {\n    const currentScript \u003d document.currentScript;\n    const parent \u003d currentScript.parentElement;\n    const iframeElement \u003d parent.querySelector(\".spell-preview-iframe\");\n    const pageElement \u003d document.getElementById(\"page\");\n\n    iframeElement.addEventListener(\"mouseenter\", () \u003d\u003e {\n      pageElement.dataset.originalOverflow \u003d pageElement.style.overflow;\n      pageElement.style.overflow \u003d \"hidden\";\n    });\n\n    iframeElement.addEventListener(\"mouseleave\", () \u003d\u003e {\n      pageElement.style.overflow \u003d pageElement.dataset.originalOverflow || \"\";\n    });\n})()\n     (Drag to pan and scroll to zoom)         \n     \n     \n       \n     \n     \n     ","link":"tutorials/2_mana_basics.html","extraTerms":[]},{"name":"3. Your First Spell","description":"  3. Your First Spell   Now that you\u0026#x27;ve got a    Scroll    you can right-click it to open the spell-scribing interface. Spells consist of a tree-like structure of intersecting circles, and each circle contains a center glyph to denote its function.    When first opening a new scroll, you will see just one circle. This is the   root node  . Every other circle in your spell originates from it.  To begin writing a spell, so-called scribing patterns or revisions can be used to add, remove, and move around circles. The most basic scribing pattern is    Extensive Revision   , which adds one extra subcircle to the circle it\u0026#x27;s drawn in.    Unlike most patterns, revisions activate instantly when drawn at any point in either a scroll or mirror. They are the only way to directly affect the shape of your spell.  Another scribing pattern that may be useful for basic spells is    Grafting Revision   , which removes excess circles from the hierarchy.  With that out of the way, try to recreate the following spell in your scroll:       (() \u003d\u003e {\n    const currentScript \u003d document.currentScript;\n    const parent \u003d currentScript.parentElement;\n    const iframeElement \u003d parent.querySelector(\".spell-preview-iframe\");\n    const pageElement \u003d document.getElementById(\"page\");\n\n    iframeElement.addEventListener(\"mouseenter\", () \u003d\u003e {\n      pageElement.dataset.originalOverflow \u003d pageElement.style.overflow;\n      pageElement.style.overflow \u003d \"hidden\";\n    });\n\n    iframeElement.addEventListener(\"mouseleave\", () \u003d\u003e {\n      pageElement.style.overflow \u003d pageElement.dataset.originalOverflow || \"\";\n    });\n})()\n     (Drag to pan and scroll to zoom)      Once that\u0026#x27;s done, hold the scroll in your offhand, and draw the following spell in your mirror:     (() \u003d\u003e {\n    const currentScript \u003d document.currentScript;\n    const parent \u003d currentScript.parentElement;\n    const iframeElement \u003d parent.querySelector(\".spell-preview-iframe\");\n    const pageElement \u003d document.getElementById(\"page\");\n\n    iframeElement.addEventListener(\"mouseenter\", () \u003d\u003e {\n      pageElement.dataset.originalOverflow \u003d pageElement.style.overflow;\n      pageElement.style.overflow \u003d \"hidden\";\n    });\n\n    iframeElement.addEventListener(\"mouseleave\", () \u003d\u003e {\n      pageElement.style.overflow \u003d pageElement.dataset.originalOverflow || \"\";\n    });\n})()\n     You may notice that, while drawing, the top pattern gets replaced with the spell from your scroll.  Afterward, if you did everything correctly, the spell should have targeted and broken the block you were looking at! This is the most basic way of spellcasting, write the spell in a scroll, and cast it using your mirror.    But why did this work?      When a spell is cast, drawn glyphs will take the output from connected subcircles as input, perform an operation, and output to their parent circle.  Think of a spell like a tree with many splitting branches. First, the leaves of the tree (the most deeply nested circles) create or read values from the world. These can be constants or, for example, a reference to the caster. These are called    Delusions   .    After this, intermediate glyphs process the information into an appropriate format, for example taking a reference to a creature, and returning its position. These are either    Distortions    or    Ingresses   .  Some glyphs may not return a value, often called    Ploys   . These glyphs will affect the world, which is usually the end goal of the entire spell.    With this information in mind, we can take a look back at the spell in our scroll, and recognise three types of glyphs (also known as tricks).  The most deeply nested glyph must be a Delusion, as it takes no inputs. Meanwhile, the glyph in the root node has to be a Ploy, since it only takes inputs, and provides no output. Which means the intermediate circle must contain either a Distortion or an Ingress.    If you were to look up these patterns in the    Tricks    section of this book, you\u0026#x27;d see this assessment is correct. From smallest to largest circle, this spell is made up of:      Reflection Delusion         Archer\u0026#x27;s Ingress      and    Ploy of Destruction      Take a look at the inputs and outputs listed for these tricks, and try to understand how this spell combines them!      Okay, but how did we cast it?    Well, we took advantage of the mirror\u0026#x27;s tendency to cast anything it touches. The patterns we drew in the mirror are    Notulist\u0026#x27;s Delusion    and    Grand Stratagem   . The former returns any spell held in the caster\u0026#x27;s offhand as data, while the latter takes a spell as data and casts it.  Yes, spells can cast other spells.    This chapter covered the basic concepts you need to know to start making simple spells of your own. Go experiment, and see what\u0026#x27;s possible!       \n     \n     \n       \n     \n     \n     ","link":"tutorials/3_first_spell.html","extraTerms":[]},{"name":"4. Easier Casting","description":"  4. Easier Casting   It\u0026#x27;s worth noting that casting spells through the Mirror of Evaluation has a few drawbacks. Most obviously, it\u0026#x27;s a massive hassle drawing those two patterns every time. Potentially more importantly though, any spell cast happening through the mirror can only execute at most   64 circles  . That really isn\u0026#x27;t a lot!    This is where    Wands    come in. As briefly mentioned in the first chapter, wands execute any spell inscribed onto them when right-clicked.  What\u0026#x27;s inscribing you may ask? Actually, you\u0026#x27;ve already partially interacted with it.    Notulist\u0026#x27;s Delusion   , used in chapter two, is used to read an inscribed spell from an item. This works on Scrolls because a spell written on them technically counts as being inscribed.    Spells can actually be inscribed onto   any   item, though only Scrolls and Mirrors let you directly edit them.  Writing a spell to an item can be done by using    Notulist\u0026#x27;s Ploy   . Similarly to    Grand Stratagem   , it only takes one input, and provides no output.  You can use a spell like the following in a mirror to read and inscribe a spell.    First draw the small pattern while holding your spell, then swap to the item you want to inscribe, and draw the other pattern.     (() \u003d\u003e {\n    const currentScript \u003d document.currentScript;\n    const parent \u003d currentScript.parentElement;\n    const iframeElement \u003d parent.querySelector(\".spell-preview-iframe\");\n    const pageElement \u003d document.getElementById(\"page\");\n\n    iframeElement.addEventListener(\"mouseenter\", () \u003d\u003e {\n      pageElement.dataset.originalOverflow \u003d pageElement.style.overflow;\n      pageElement.style.overflow \u003d \"hidden\";\n    });\n\n    iframeElement.addEventListener(\"mouseleave\", () \u003d\u003e {\n      pageElement.style.overflow \u003d pageElement.dataset.originalOverflow || \"\";\n    });\n})()\n      Inscribing a spell onto a Wand will give it an enchanted glint, and show the inscribed spell in its tooltip.  When you use your new Wand, a    Spell Slot    is consumed while the spell runs, allowing the spell to run for as long as needed to complete.  Combining all this, try inscribing the following spell onto a Wand:       (() \u003d\u003e {\n    const currentScript \u003d document.currentScript;\n    const parent \u003d currentScript.parentElement;\n    const iframeElement \u003d parent.querySelector(\".spell-preview-iframe\");\n    const pageElement \u003d document.getElementById(\"page\");\n\n    iframeElement.addEventListener(\"mouseenter\", () \u003d\u003e {\n      pageElement.dataset.originalOverflow \u003d pageElement.style.overflow;\n      pageElement.style.overflow \u003d \"hidden\";\n    });\n\n    iframeElement.addEventListener(\"mouseleave\", () \u003d\u003e {\n      pageElement.style.overflow \u003d pageElement.dataset.originalOverflow || \"\";\n    });\n})()\n   Once you have it inscribed, try it out to see what it does. After that, try looking up the tricks to see   how  !       \n     \n     \n       \n     \n     \n     ","link":"tutorials/4_easier_casting.html","extraTerms":[]},{"name":"5. Spell Structure","description":"  5. Spell Structure   While chapter two covered the basics of spell-scribing, there are a few important elements it doesn\u0026#x27;t mention.  Most importantly, some tricks may take multiple inputs, as seen in the example spell in the last chapter. Unlike there though, tricks sometimes also require inputs to be of specific types, in a specific order.    The inputs a trick takes, in addition to the output it provides, are called its   Signature  . These signatures are used all across this book whenever a pattern for a trick is shown.  If you\u0026#x27;re having trouble understanding the format used for signatures, check out    the entry explaining them in more detail   !    But how do we know which circle comes first?         (() \u003d\u003e {\n    const currentScript \u003d document.currentScript;\n    const parent \u003d currentScript.parentElement;\n    const iframeElement \u003d parent.querySelector(\".spell-preview-iframe\");\n    const pageElement \u003d document.getElementById(\"page\");\n\n    iframeElement.addEventListener(\"mouseenter\", () \u003d\u003e {\n      pageElement.dataset.originalOverflow \u003d pageElement.style.overflow;\n      pageElement.style.overflow \u003d \"hidden\";\n    });\n\n    iframeElement.addEventListener(\"mouseleave\", () \u003d\u003e {\n      pageElement.style.overflow \u003d pageElement.dataset.originalOverflow || \"\";\n    });\n})()\n   Take a look at the spell above. Its subcircles are labelled with the order they\u0026#x27;re cast, from 0 to 3.    This is the same order they\u0026#x27;ll be inputted into the parent circle in. How do we know this? That\u0026#x27;s what the   Divider Pin   is for.  All circles with at least one subcircle will have a transparent blue Divider Pin somewhere on their ring. Starting from this pin, subcircles are cast in a clockwise fashion, and may be numbered starting from zero.  See if you can spot the pin on this spell!    One last thing! Aside from    Extensive Revision    and    Grafting Revision   , a lot of additional scribing patterns are also available, ranging from simple conveniences to actual gamechangers.  If you haven\u0026#x27;t already, be sure to check out the    Spell-Scribing    chapter in its entirety!       \n     \n     \n       \n     \n     \n     ","link":"tutorials/5_spell_structure.html","extraTerms":[]},{"name":"6. Recursion","description":"  6. Recursion   Coming soon!       \n     \n     \n       \n     \n     \n     ","link":"tutorials/7_recursion.html","extraTerms":[]},{"name":"7. Spell Fragments","description":"  7. Spell Fragments   Coming soon!       \n     \n     \n       \n     \n     \n     ","link":"tutorials/6_functions.html","extraTerms":[]},{"name":"Ploys","description":"  Ploys   Ploys are a subset of tricks that perform actions and either alter the world, or something less substantial.  Often, ploys will have a mana cost. This is denoted by a swirl icon under the pattern. Hover over the icon to see how mana cost is calculated.       \n     \n     \n       \n     \n     \n     ","link":"ploys.html","extraTerms":[]},{"name":"Ploy of the Moon Watcher","description":"Slot?, Slot? -\u003e Void","link":"ploys/mana.html#trickster:battery_creation","extraTerms":[]},{"name":"Benevolent Conduit\u0027s Ploy","description":"Number, Slot... | [Slot] -\u003e Number","link":"ploys/mana.html#trickster:push_mana","extraTerms":[]},{"name":"Malevolent Conduit\u0027s Ploy","description":"Number, Slot... | [Slot] -\u003e Number","link":"ploys/mana.html#trickster:pull_mana","extraTerms":[]},{"name":"A Shimmer in the Night","description":"  A Shimmer in the Night     mun en kon suli o lawa e mi      o pana tawa mi      o pona e mi    -- jan Enali     Ploy of the Moon Watcher                                               Slot ?   ,   Slot ?    -\u0026gt;   Void       Creates a    Knot    using the crystal in the given slot and a Glass Block. Uses amethyst if no first slot is provided.    Note: Mana Transfers  Mana can only ever be moved between the caster\u0026#x27;s reserves and external slots, never between two arbitrary external slots. When pushing to or pulling from multiple slots at once, load is equally split between all of them.  When pulling or pushing mana over a distance lesser than 16 blocks, transfers are lossless.    Over greater distances though, a loss is incurred proportional to the amount of mana transferred multiplied by distance.  This loss follows a roughly exponential scale, reaching around 50% at or near 100 blocks of distance.     Benevolent Conduit\u0026#x27;s Ploy                                                     Number  ,    Slot  ...   | [  Slot  ]    -\u0026gt;   Number       Pushes mana into the given slots from the caster\u0026#x27;s reserves, up to an amount. Returns the amount moved.     Malevolent Conduit\u0026#x27;s Ploy                                                     Number  ,    Slot  ...   | [  Slot  ]    -\u0026gt;   Number       Pulls mana from the given slots into the caster\u0026#x27;s reserves, up to an amount. Returns the amount moved.       \n     \n     \n       \n     \n     \n     ","link":"ploys/mana.html","extraTerms":[]},{"name":"Ploy of Destruction","description":"Vector -\u003e Vector","link":"ploys/block.html#trickster:break_block","extraTerms":[]},{"name":"Ploy of Creation","description":"Vector, Slot, Vector?, Vector? -\u003e Vector\nVector, Block, Vector?, Vector? -\u003e Vector","link":"ploys/block.html#trickster:place_block","extraTerms":[]},{"name":"Ploy of Featherweight","description":"Entity, Number -\u003e Entity\nVector, Number -\u003e Entity","link":"ploys/block.html#trickster:change_weight","extraTerms":[]},{"name":"Ploy of Exchange","description":"Vector, Vector -\u003e Void","link":"ploys/block.html#trickster:swap_block","extraTerms":[]},{"name":"Ploy of Investiture","description":"Vector -\u003e Vector","link":"ploys/block.html#trickster:heat","extraTerms":[]},{"name":"Ploy of Divestiture","description":"Vector -\u003e Vector","link":"ploys/block.html#trickster:cool","extraTerms":[]},{"name":"Ploy of Attrition","description":"Vector, Vector -\u003e Vector","link":"ploys/block.html#trickster:erode","extraTerms":[]},{"name":"Floral Ploy","description":"Vector -\u003e Vector","link":"ploys/block.html#trickster:conjure_flower","extraTerms":[]},{"name":"Aquatic Ploy","description":"Vector -\u003e Vector","link":"ploys/block.html#trickster:conjure_water","extraTerms":[]},{"name":"Illumination Ploy","description":"Vector -\u003e Vector","link":"ploys/block.html#trickster:conjure_light","extraTerms":[]},{"name":"Resonance Ploy","description":"Vector, Number -\u003e Boolean","link":"ploys/block.html#trickster:power_resonator","extraTerms":[]},{"name":"Block Interaction","description":"  Block Interaction   This entry contains tricks that operate directly on blocks in the world.     Ploy of Destruction                                         Vector   -\u0026gt;   Vector        Breaks the block at the given position.      Ploy of Creation                                 Vector  ,   Slot  ,   Vector ?   ,   Vector ?    -\u0026gt;   Vector      Vector  ,   Block  ,   Vector ?   ,   Vector ?    -\u0026gt;   Vector        Places a block at the given position.    The block to place is determined based on a slot reference or block type fragment.  If given a block type, the first available item of that type in the caster\u0026#x27;s inventory will be consumed.    Ploy of Creation optionally takes two additional arguments.    The first defines the direction to place from.   The second defines what side of an adjacent block is interacted with when placing.   Some blocks may change their facing or other properties based on these values.     Ploy of Featherweight                                         Entity  ,   Number   -\u0026gt;   Entity      Vector  ,   Number   -\u0026gt;   Entity        Given a number between zero and one, levitates the block at the given position, using the number as its gravity multiplier.    The gravity manipulation of Ploy of Featherweight usually wears off after about a second if not reapplied.  Applying it again to an already levitating block with a multiplier below one might be used to keep the block in its levitating state for longer, even while touching the ground.    If one instead wants to force the block to solidify regardless of its position or state, a featherweight of exactly one may be applied.     Ploy of Exchange                                             Vector  ,   Vector   -\u0026gt;   Void        Exchanges the blocks at two positions in the world. Neither of the positions can be empty.    Note: Heating and Cooling  By pushing or pulling a large quantity of mana into or from a block, it may be rapidly heated or cooled.  Given these extreme temperature changes, some blocks may change significantly in useful ways, though some collateral effects on surrounding blocks should be expected.     Ploy of Investiture                                         Vector   -\u0026gt;   Vector        Instantly heat up the given block significantly.  Heating a furnace like this would be quite effective.     Ploy of Divestiture                                         Vector   -\u0026gt;   Vector        Instantly cools off the given block significantly.     Ploy of Attrition                                     Vector  ,   Vector   -\u0026gt;   Vector        Wears down the block at the first given position, making use of the water at the second given position.     Floral Ploy                                                 Vector   -\u0026gt;   Vector        Conjures a random flower at the given position. The block underneath must have a solid top face.     Aquatic Ploy                                 Vector   -\u0026gt;   Vector        Conjures a bucket\u0026#x27;s worth of water at the given position.     Illumination Ploy                                   Vector   -\u0026gt;   Vector        Conjures a permanent light source at the given position.     Resonance Ploy                                       Vector  ,   Number   -\u0026gt;   Boolean        Powers the    Spell Resonator    at the given position with the given power level, between 0 and 15.       \n     \n     \n       \n     \n     \n     ","link":"ploys/block.html","extraTerms":[]},{"name":"Ploy of Featherweight","description":"Entity, Number -\u003e Entity\nVector, Number -\u003e Entity","link":"ploys/entity.html#trickster:change_weight","extraTerms":[]},{"name":"Kinetic Ploy","description":"Entity, Vector -\u003e Entity","link":"ploys/entity.html#trickster:add_velocity","extraTerms":[]},{"name":"Ploy of Occupation","description":"Entity, Number -\u003e Entity","link":"ploys/entity.html#trickster:set_scale","extraTerms":[]},{"name":"Ploy of the Usurper","description":"Entity, Vector -\u003e Entity","link":"ploys/entity.html#trickster:displace","extraTerms":[]},{"name":"Polymorph Ploy","description":"Entity, Entity -\u003e Void","link":"ploys/entity.html#trickster:polymorph","extraTerms":[]},{"name":"Dispel Polymorph Ploy","description":"Entity -\u003e Entity","link":"ploys/entity.html#trickster:dispel_polymorph","extraTerms":[]},{"name":"Containment Ploy","description":"Entity -\u003e Void","link":"ploys/entity.html#trickster:store_entity","extraTerms":[]},{"name":"Extrication Ploy","description":"Vector -\u003e Entity | Void","link":"ploys/entity.html#trickster:release_entity","extraTerms":[]},{"name":"Entity Ploys","description":"  Entity Ploys     \u0026quot;You\u0026#x27;ve read up on the Manton Effect before, I expect? It\u0026#x27;s a weird one.\u0026quot;      \u0026quot;No one is quite sure why these limitations exist as they are, or if we just haven\u0026#x27;t found the right methods yet. Regardless, one must keep them in mind at all times.\u0026quot;    -- An excerpt from a lecture by Prof. Olivine.     Ploy of Featherweight                                         Entity  ,   Number   -\u0026gt;   Entity      Vector  ,   Number   -\u0026gt;   Entity        Given a number between zero and one, multiplies the given entity\u0026#x27;s effective gravity by that number for one second, provided it is alive.     Kinetic Ploy                                     Entity  ,   Vector   -\u0026gt;   Entity        Applies the given vector as velocity to the given entity.    Cost scaling on Kinetic Ploy is   very   aggressive. Additional casts of the ploy within the same 1/20th of a second will incur the cost   as if   it was cast with   the added length of both casts   in one go.  Because of the cubic scaling of cost on this ploy, this is very likely to be undesirable. Consider using    Deviation of Suspension    to delay the next cast before stacking it where possible.     Ploy of Occupation                                       Entity  ,   Number   -\u0026gt;   Entity        Changes the scale of the given entity. Entities cannot be scaled below 0.0625 or above 8 times their usual size.    Entities scaled in this way will slowly revert back to their original scale over time, unless the ploy is recast periodically.     Ploy of the Usurper                                                 Entity  ,   Vector   -\u0026gt;   Entity        Displaces the given entity by the given vector after two seconds. This ploy has the same aggressive and stacking cost scaling as Kinetic Ploy.     Polymorph Ploy                                         Entity  ,   Entity   -\u0026gt;   Void        Changes the first entity\u0026#x27;s appearance to match the second. Both entities must be players.     Dispel Polymorph Ploy                                 Entity   -\u0026gt;   Entity        Dispels any polymorph applied to the given entity.     Containment Ploy                                     Entity   -\u0026gt;   Void        Stores the given entity in the caster\u0026#x27;s    Hat   . The hat must be held in the caster\u0026#x27;s offhand, and the entity must not be a player.    Some entities cannot be stored into a hat, usually because they are too large. Trying to store such entities will result in a blunder.     Extrication Ploy                                     Vector   -\u0026gt;    Entity   |   Void         Releases the entity stored in the caster\u0026#x27;s    Hat    to the given position, returning a reference to it. Returns void if there is no entity to release.       \n     \n     \n       \n     \n     \n     ","link":"ploys/entity.html","extraTerms":[]},{"name":"Marketer\u0027s Ploy","description":"Number, Vector, Vector, Spell, Number?, Entity... | [Entity]? -\u003e Number","link":"ploys/flecks.html#trickster:draw_spell","extraTerms":[]},{"name":"Artist\u0027s Ploy","description":"Number, Vector, Vector, Entity... | [Entity]? -\u003e Number","link":"ploys/flecks.html#trickster:draw_line","extraTerms":[]},{"name":"Orwell\u0027s Ploy","description":"Number, Entity... | [Entity]? -\u003e Number","link":"ploys/flecks.html#trickster:delete_fleck","extraTerms":[]},{"name":"Flecks","description":"  Flecks     In this world,      I wander.      In our minds,      I carve.      In their eyes,      I behold,      A beauty so fine,      It cannot be held.    -- Oapheli    Flecks are a method of displaying data to select players. They last for a mere second, needing to be continuously refreshed.  All fleck-creating tricks take an identifying number, which may be used by any caster to update and overwrite the fleck. The number is returned for chaining. All flecks can also take an optional list of players, or a sole player, for which the fleck will display only to them.     Marketer\u0026#x27;s Ploy                                             Number  ,   Vector  ,   Vector  ,   Spell  ,   Number ?   ,    Entity  ...   | [  Entity  ]  ?    -\u0026gt;   Number       At the given position, with the given facing, display a spell, optionally scaled.     Artist\u0026#x27;s Ploy                                     Number  ,   Vector  ,   Vector  ,    Entity  ...   | [  Entity  ]  ?    -\u0026gt;   Number       Draws a line between the given positions.     Orwell\u0026#x27;s Ploy                                         Number  ,    Entity  ...   | [  Entity  ]  ?    -\u0026gt;   Number       Removes any fleck with the given id.       \n     \n     \n       \n     \n     \n     ","link":"ploys/flecks.html","extraTerms":[]},{"name":"Dispatch Ploy","description":"Any, Number? -\u003e Any\nAny, Slot -\u003e Any","link":"ploys/message.html#trickster:message_send","extraTerms":[]},{"name":"Ploy of Receipt","description":"Number? -\u003e [Any]\nNumber?, Slot -\u003e [Any]","link":"ploys/message.html#trickster:message_listen","extraTerms":[]},{"name":"Interspell Communication","description":"  Interspell Communication   Utilizing the following tricks, otherwise separate spells may communicate with each other.     Dispatch Ploy                                 Any  ,   Number ?    -\u0026gt;   Any      Any  ,   Slot   -\u0026gt;   Any        Sends the given fragment to all spells within 16 blocks. Range may be extended by the given number at the cost of mana.     Ploy of Receipt                                 Number ?    -\u0026gt;   [ Any  ]       Number ?   ,   Slot   -\u0026gt;   [ Any  ]        Returns all messages received on the tick after they were received. Must be provided with a timeout after which to return anyway.    A slot fragment may be supplied as the second argument to Dispatch Ploy instead of a number, which will send the message   into   the item present in that slot, if possible.  Ploy of Receipt works similarly for receiving messages   from   items.  Not all items are able to channel messages.       \n     \n     \n       \n     \n     \n     ","link":"ploys/message.html","extraTerms":[]},{"name":"Ploy of Offering","description":"Slot, Vector, Number? -\u003e Entity","link":"ploys/inventory.html#trickster:drop_stack_from_slot","extraTerms":[]},{"name":"Swindler\u0027s Ploy","description":"Slot, Slot -\u003e Void","link":"ploys/inventory.html#trickster:swap_slot","extraTerms":[]},{"name":"Organizer\u0027s Ploy","description":"Slot, Slot, Number? -\u003e Number","link":"ploys/inventory.html#trickster:move_stack","extraTerms":[]},{"name":"Cranial Shift Ploy","description":"Number -\u003e Boolean","link":"ploys/inventory.html#trickster:set_hat","extraTerms":[]},{"name":"Inventory Manipulation","description":"  Inventory Manipulation   Listed here are ploys that interact with inventory slots or other inventory features.     Ploy of Offering                                     Slot  ,   Vector  ,   Number ?    -\u0026gt;   Entity       Drops items from the given slot at a position, returning their entity. Optionally, an amount can be specified.     Swindler\u0026#x27;s Ploy                                             Slot  ,   Slot   -\u0026gt;   Void       Swaps the item stacks within the given slots.     Organizer\u0026#x27;s Ploy                                         Slot  ,   Slot  ,   Number ?    -\u0026gt;   Number       Moves items from one slot into another, optionally limiting the amount. Can merge and split stacks.     Cranial Shift Ploy                                                 Number   -\u0026gt;   Boolean       Sets the selected slot in the caster\u0026#x27;s    Hat   , returning a boolean based on success.       \n     \n     \n       \n     \n     \n     ","link":"ploys/inventory.html","extraTerms":[]},{"name":"Cultivator\u0027s Ploy","description":"Vector -\u003e Number","link":"ploys/mana_generation.html#trickster:drain_matter","extraTerms":[]},{"name":"Mana Generation","description":"  Mana Generation   Listed here are ploys which may be used to generated mana. They return the amount of excess mana that was generated but lost due to storage limitations.     Cultivator\u0026#x27;s Ploy                                             Vector   -\u0026gt;   Number       Absorbs soft plant matter at the given position into mana.       \n     \n     \n       \n     \n     \n     ","link":"ploys/mana_generation.html","extraTerms":[]},{"name":"Ploy of Celestial Pin","description":"Vector -\u003e Vector","link":"ploys/misc.html#trickster:pin_chunk","extraTerms":[]},{"name":"Ploy of Clarity","description":"Number, Number, Number? -\u003e Number","link":"ploys/misc.html#trickster:show_bar","extraTerms":[]},{"name":"Ploy of Obfuscation","description":"Number -\u003e Number","link":"ploys/misc.html#trickster:clear_bar","extraTerms":[]},{"name":"Misc Ploys","description":"  Misc Ploys   A few miscellaneous ploys that don\u0026#x27;t fit into any other category.     Ploy of Celestial Pin                                         Vector   -\u0026gt;   Vector        Fully loads the chunk containing the given position for exactly 4 seconds.    Note: Bars  Spells can display arbitrary values on the caster\u0026#x27;s view as bars.  Bars are identified by a number and can be overwritten at any time by using the same number again. Bars are randomly colored based on their identifier. The same identifier will always display as the same color.    A bar can either be given one number, which will be interpreted on a scale of 0 to 1, or two numbers, which means it will interpret the first as the current and the second as the maximum value.  Ploy of Clarity returns the given value to its parent circle when used, allowing for easy chaining.     Ploy of Clarity                                         Number  ,   Number  ,   Number ?    -\u0026gt;   Number       Shows a bar on the caster\u0026#x27;s view identified by the first number displaying the second number.     Ploy of Obfuscation                                         Number   -\u0026gt;   Number       Immediately clears a bar identified by the given number from the caster\u0026#x27;s view.       \n     \n     \n       \n     \n     \n     ","link":"ploys/misc.html","extraTerms":[]},{"name":"Flourish Ploy","description":"Vector... | [Vector] -\u003e Vector","link":"ploys/particle.html#trickster:highlight","extraTerms":[]},{"name":"Particles","description":"  Particles   Various ploys for displaying particles in the world.     Flourish Ploy                                              Vector  ...   | [  Vector  ]    -\u0026gt;   Vector       Highlights the given blocks for a second and returns the first input unmodified.       \n     \n     \n       \n     \n     \n     ","link":"ploys/particle.html","extraTerms":[]},{"name":"Ballista\u0027s Ploy","description":"Vector, Slot? -\u003e Entity","link":"ploys/projectile.html#trickster:summon_arrow","extraTerms":[]},{"name":"Pyromancer\u0027s Ploy","description":"Vector, Slot? -\u003e Entity","link":"ploys/projectile.html#trickster:summon_fireball","extraTerms":[]},{"name":"Dragon\u0027s Ploy","description":"Vector, Slot?, Slot? -\u003e Entity","link":"ploys/projectile.html#trickster:summon_dragon_breath","extraTerms":[]},{"name":"Demolitionist\u0027s Ploy","description":"Vector, Slot? -\u003e Entity","link":"ploys/projectile.html#trickster:summon_tnt","extraTerms":[]},{"name":"Projectiles","description":"  Projectiles   Tricks for manipulating projectiles. Tricks in this category will take the required item from their caster\u0026#x27;s inventory, or optionally a specific slot.  These all have very aggressive cost scaling with distance. They should ideally be used at positions as near to the caster as possible.     Ballista\u0026#x27;s Ploy                                           Vector  ,   Slot ?    -\u0026gt;   Entity        Summons an arrow at the given position, returning it. Requires an arrow.     Pyromancer\u0026#x27;s Ploy                                                       Vector  ,   Slot ?    -\u0026gt;   Entity        Summons a fireball at the given position, returning it. Requires a fire charge.     Dragon\u0026#x27;s Ploy                                                         Vector  ,   Slot ?   ,   Slot ?    -\u0026gt;   Entity        Summons a ball of dragon\u0026#x27;s breath at the given position, returning it. Requires a bottle of dragon\u0026#x27;s breath and a fire charge.     Demolitionist\u0026#x27;s Ploy                                                     Vector  ,   Slot ?    -\u0026gt;   Entity        Summons lit TNT at the given position, returning it. Requires TNT.       \n     \n     \n       ","link":"ploys/projectile.html","extraTerms":[]}]